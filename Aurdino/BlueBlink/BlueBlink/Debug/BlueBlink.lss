
BlueBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  00002296  0000232a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f0  008001a4  008001a4  000023ce  2**0
                  ALLOC
  3 .stab         00003024  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001249  00000000  00000000  000053f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000663d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000009f0  00000000  00000000  0000666c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000ca9  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000f68a  00000000  00000000  00007d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000025bd  00000000  00000000  0001738f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004f14  00000000  00000000  0001994c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001498  00000000  00000000  0001e860  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005535  00000000  00000000  0001fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000712e  00000000  00000000  0002522d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009e8  00000000  00000000  0002c35b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 02 	jmp	0x50e	; 0x50e <__ctors_end>
       4:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_1>
       8:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__vector_2>
       c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      10:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      14:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      18:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      1c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      20:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      24:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      28:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      2c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      30:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      34:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      38:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      3c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      40:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_16>
      44:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      48:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__vector_18>
      4c:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__vector_19>
      50:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      54:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      58:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      5c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      60:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      64:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>

00000068 <_ZZL16m_print_aci_dataP14hal_aci_data_tE3__c>:
      68:	2c 20 00                                            , .

0000006b <_ZZL16m_print_aci_dataP14hal_aci_data_tE3__c_0>:
	...

0000006c <_ZL10setup_msgs>:
      6c:	00 07 06 00 00 03 02 41 d7 00 00 00 00 00 00 00     .......A........
	...
      8c:	00 00 1f 06 10 00 00 00 00 00 00 00 04 00 04 01     ................
      9c:	01 00 00 06 00 00 90 00 00 00 00 00 00 00 00 00     ................
      ac:	00 00 00 1f 06 10 1c 00 02 00 00 00 00 00 00 00     ................
	...
      c4:	00 00 10 00 00 00 10 03 90 01 ff 00 1f 06 10 38     ...............8
      d4:	ff ff 02 58 00 05 00 00 00 00 00 00 00 14 00 00     ...X............
      e4:	00 10 00 00 00 04 00 00 00 00 00 00 00 05 06 10     ................
      f4:	54 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     T...............
	...
     110:	00 00 1f 06 20 00 04 04 02 02 00 01 28 00 01 00     .... .......(...
     120:	18 04 04 05 05 00 02 28 03 01 0e 03 00 00 2a 04     .......(......*.
     130:	14 0a 00 1f 06 20 1c 0a 00 03 2a 00 01 42 4c 45     ..... ....*..BLE
     140:	20 53 68 69 65 6c 64 04 04 05 05 00 04 28 03 01      Shield......(..
     150:	02 05 00 00 1f 06 20 38 01 2a 06 04 03 02 00 05     ...... 8.*......
     160:	2a 01 01 00 00 04 04 05 05 00 06 28 03 01 02 07     *..........(....
     170:	00 04 2a 06 00 1f 06 20 54 04 09 08 00 07 2a 04     ..*.... T.....*.
     180:	01 06 00 12 00 00 00 0a 00 04 04 02 02 00 08 28     ...............(
     190:	00 01 01 18 04 00 1f 06 20 70 04 10 10 00 09 28     ........ p.....(
     1a0:	00 01 1e 94 8d f1 48 31 94 ba 75 4c 3e 50 00 00     ......H1..uL>P..
     1b0:	3d 71 04 04 13 13 00 1f 06 20 8c 00 0a 28 03 01     =q....... ...(..
     1c0:	04 0b 00 1e 94 8d f1 48 31 94 ba 75 4c 3e 50 03     .......H1..uL>P.
     1d0:	00 3d 71 44 10 14 00 00 1f 06 20 a8 00 0b 00 03     .=qD...... .....
     1e0:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1f0:	00 00 00 00 00 04 04 13 00 1f 06 20 c4 13 00 0c     ........... ....
     200:	28 03 01 10 0d 00 1e 94 8d f1 48 31 94 ba 75 4c     (.........H1..uL
     210:	3e 50 02 00 3d 71 14 00 14 00 1f 06 20 e0 00 00     >P..=q...... ...
     220:	0d 00 02 02 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     238:	46 14 00 1f 06 20 fc 03 02 00 0e 29 02 01 00 00     F.... .....)....
     248:	04 04 02 02 00 0f 28 00 01 0a 18 04 04 05 05 00     ......(.........
     258:	10 28 03 00 1c 06 21 18 01 02 11 00 27 2a 04 04     .(....!.....'*..
     268:	09 01 00 11 2a 27 01 0a 00 00 00 00 00 00 00 00     ....*'..........
     278:	00 00 00 00 00 1f 06 40 00 2a 00 01 00 80 04 00     .......@.*......
     288:	03 00 00 00 03 02 00 08 04 00 0b 00 00 00 02 02     ................
     298:	00 02 04 00 0d 00 0f 06 40 1c 00 0e 2a 27 01 00     ........@...*'..
     2a8:	80 04 00 11 00 00 00 00 00 00 00 00 00 00 00 00     ................
     2b8:	00 00 00 00 00 00 00 13 06 50 00 1e 94 8d f1 48     .........P.....H
     2c8:	31 94 ba 75 4c 3e 50 00 00 3d 71 00 00 00 00 00     1..uL>P..=q.....
	...
     2e0:	0f 06 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
	...
     300:	00 06 06 f0 00 03 6a 44 00 00 00 00 00 00 00 00     ......jD........
	...

00000321 <_ZZL14process_eventsvE3__c>:
     321:	45 76 74 20 44 65 76 69 63 65 20 53 74 61 72 74     Evt Device Start
     331:	65 64 3a 20 53 65 74 75 70 00                       ed: Setup.

0000033b <_ZZL14process_eventsvE3__c_0>:
     33b:	45 72 72 6f 72 20 69 6e 20 41 43 49 20 53 65 74     Error in ACI Set
     34b:	75 70 00                                            up.

0000034e <_ZZL14process_eventsvE3__c_1>:
     34e:	45 76 74 20 44 65 76 69 63 65 20 53 74 61 72 74     Evt Device Start
     35e:	65 64 3a 20 53 74 61 6e 64 62 79 00                 ed: Standby.

0000036a <_ZZL14process_eventsvE3__c_2>:
     36a:	41 64 76 65 72 74 69 73 69 6e 67 20 73 74 61 72     Advertising star
     37a:	74 65 64 00                                         ted.

0000037e <_ZZL14process_eventsvE3__c_3>:
     37e:	41 43 49 20 43 6f 6d 6d 61 6e 64 20 00              ACI Command .

0000038b <_ZZL14process_eventsvE3__c_4>:
     38b:	45 76 74 20 43 6d 64 20 72 65 73 70 6f 6e 65 3a     Evt Cmd respone:
     39b:	20 45 72 72 6f 72 2e 20 41 72 64 75 69 6e 6f 20      Error. Arduino 
     3ab:	69 73 20 69 6e 20 61 6e 20 77 68 69 6c 65 28 31     is in an while(1
     3bb:	29 3b 20 6c 6f 6f 70 00                             ); loop.

000003c3 <_ZZL14process_eventsvE3__c_5>:
     3c3:	45 76 74 20 43 6f 6e 6e 65 63 74 65 64 00           Evt Connected.

000003d1 <_ZZL14process_eventsvE3__c_6>:
     3d1:	45 76 74 20 50 69 70 65 20 53 74 61 74 75 73 00     Evt Pipe Status.

000003e1 <_ZZL14process_eventsvE3__c_7>:
     3e1:	45 76 74 20 6c 69 6e 6b 20 63 6f 6e 6e 65 63 74     Evt link connect
     3f1:	69 6f 6e 20 69 6e 74 65 72 76 61 6c 20 63 68 61     ion interval cha
     401:	6e 67 65 64 00                                      nged.

00000406 <_ZZL14process_eventsvE3__c_8>:
     406:	45 76 74 20 44 69 73 63 6f 6e 6e 65 63 74 65 64     Evt Disconnected
     416:	2f 41 64 76 65 72 74 69 73 69 6e 67 20 74 69 6d     /Advertising tim
     426:	65 64 20 6f 75 74 00                                ed out.

0000042d <_ZZL14process_eventsvE3__c_9>:
     42d:	41 64 76 65 72 74 69 73 69 6e 67 20 73 74 61 72     Advertising star
     43d:	74 65 64 00                                         ted.

00000441 <_ZZL14process_eventsvE3__c_10>:
     441:	41 43 49 20 45 76 74 20 50 69 70 65 20 45 72 72     ACI Evt Pipe Err
     451:	6f 72 3a 20 50 69 70 65 20 23 3a 00                 or: Pipe #:.

0000045d <_ZZL14process_eventsvE3__c_11>:
     45d:	20 20 50 69 70 65 20 45 72 72 6f 72 20 43 6f 64       Pipe Error Cod
     46d:	65 3a 20 30 78 00                                   e: 0x.

00000473 <_ZZ5setupE3__c>:
     473:	44 65 76 69 63 65 20 73 74 61 72 74 65 64 00        Device started.

00000482 <_ZZ4loopE3__c>:
     482:	47 6f 74 20 42 4c 45 20 42 59 54 45 20 3a 20 00     Got BLE BYTE : .

00000492 <_ZZ4loopE3__c_0>:
     492:	42 4c 45 20 64 69 73 63 6f 6e 6e 65 63 74 65 64     BLE disconnected
	...

000004a3 <_ZZ4loopE3__c_1>:
     4a3:	42 4c 45 20 63 6f 6e 6e 65 63 74 65 64 00           BLE connected.

000004b1 <port_to_mode_PGM>:
     4b1:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000004bb <port_to_output_PGM>:
     4bb:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004c5 <port_to_input_PGM>:
     4c5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000004cf <digital_pin_to_port_PGM>:
     4cf:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4df:	03 03 03 03                                         ....

000004e3 <digital_pin_to_bit_mask_PGM>:
     4e3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     4f3:	04 08 10 20                                         ... 

000004f7 <digital_pin_to_timer_PGM>:
     4f7:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     507:	00 00 00 00 00                                      .....

0000050c <__ctors_start>:
     50c:	da 0e       	add	r13, r26

0000050e <__ctors_end>:
     50e:	11 24       	eor	r1, r1
     510:	1f be       	out	0x3f, r1	; 63
     512:	cf ef       	ldi	r28, 0xFF	; 255
     514:	d8 e0       	ldi	r29, 0x08	; 8
     516:	de bf       	out	0x3e, r29	; 62
     518:	cd bf       	out	0x3d, r28	; 61

0000051a <__do_copy_data>:
     51a:	11 e0       	ldi	r17, 0x01	; 1
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b1 e0       	ldi	r27, 0x01	; 1
     520:	e6 e9       	ldi	r30, 0x96	; 150
     522:	f2 e2       	ldi	r31, 0x22	; 34
     524:	02 c0       	rjmp	.+4      	; 0x52a <__do_copy_data+0x10>
     526:	05 90       	lpm	r0, Z+
     528:	0d 92       	st	X+, r0
     52a:	a4 3a       	cpi	r26, 0xA4	; 164
     52c:	b1 07       	cpc	r27, r17
     52e:	d9 f7       	brne	.-10     	; 0x526 <__do_copy_data+0xc>

00000530 <__do_clear_bss>:
     530:	24 e0       	ldi	r18, 0x04	; 4
     532:	a4 ea       	ldi	r26, 0xA4	; 164
     534:	b1 e0       	ldi	r27, 0x01	; 1
     536:	01 c0       	rjmp	.+2      	; 0x53a <.do_clear_bss_start>

00000538 <.do_clear_bss_loop>:
     538:	1d 92       	st	X+, r1

0000053a <.do_clear_bss_start>:
     53a:	a4 39       	cpi	r26, 0x94	; 148
     53c:	b2 07       	cpc	r27, r18
     53e:	e1 f7       	brne	.-8      	; 0x538 <.do_clear_bss_loop>

00000540 <__do_global_ctors>:
     540:	15 e0       	ldi	r17, 0x05	; 5
     542:	ce e0       	ldi	r28, 0x0E	; 14
     544:	d5 e0       	ldi	r29, 0x05	; 5
     546:	04 c0       	rjmp	.+8      	; 0x550 <__do_global_ctors+0x10>
     548:	22 97       	sbiw	r28, 0x02	; 2
     54a:	fe 01       	movw	r30, r28
     54c:	0e 94 1c 11 	call	0x2238	; 0x2238 <__tablejump__>
     550:	cc 30       	cpi	r28, 0x0C	; 12
     552:	d1 07       	cpc	r29, r17
     554:	c9 f7       	brne	.-14     	; 0x548 <__do_global_ctors+0x8>
     556:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <main>
     55a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <_exit>

0000055e <__bad_interrupt>:
     55e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000562 <_Z34acil_encode_cmd_get_device_versionPh>:
  *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SLEEP;
}

void acil_encode_cmd_get_device_version(uint8_t *buffer)
{
  *(buffer + OFFSET_ACI_CMD_T_LEN) = 1;
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
  *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_GET_DEVICE_VERSION;
     568:	29 e0       	ldi	r18, 0x09	; 9
     56a:	21 83       	std	Z+1, r18	; 0x01
     56c:	08 95       	ret

0000056e <_Z30acil_encode_cmd_set_local_dataPhP31aci_cmd_params_set_local_data_th>:
}

void acil_encode_cmd_set_local_data(uint8_t *buffer, aci_cmd_params_set_local_data_t *p_aci_cmd_params_set_local_data, uint8_t data_size)
{
     56e:	dc 01       	movw	r26, r24
  *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_SET_LOCAL_DATA_BASE_LEN + data_size;
     570:	84 2f       	mov	r24, r20
     572:	8e 5f       	subi	r24, 0xFE	; 254
     574:	8c 93       	st	X, r24
  *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SET_LOCAL_DATA;
     576:	8d e0       	ldi	r24, 0x0D	; 13
     578:	11 96       	adiw	r26, 0x01	; 1
     57a:	8c 93       	st	X, r24
     57c:	11 97       	sbiw	r26, 0x01	; 1
  *(buffer + OFFSET_ACI_CMD_T_SET_LOCAL_DATA + OFFSET_ACI_CMD_PARAMS_SEND_DATA_T_TX_DATA + OFFSET_ACI_TX_DATA_T_PIPE_NUMBER) = p_aci_cmd_params_set_local_data->tx_data.pipe_number;
     57e:	e6 2f       	mov	r30, r22
     580:	f7 2f       	mov	r31, r23
     582:	81 91       	ld	r24, Z+
     584:	12 96       	adiw	r26, 0x02	; 2
     586:	8c 93       	st	X, r24
     588:	12 97       	sbiw	r26, 0x02	; 2
  memcpy(buffer + OFFSET_ACI_CMD_T_SET_LOCAL_DATA + OFFSET_ACI_CMD_PARAMS_SEND_DATA_T_TX_DATA + OFFSET_ACI_TX_DATA_T_ACI_DATA,  &(p_aci_cmd_params_set_local_data->tx_data.aci_data[0]), data_size);
     58a:	13 96       	adiw	r26, 0x03	; 3
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	6e 2f       	mov	r22, r30
     590:	7f 2f       	mov	r23, r31
     592:	8a 2f       	mov	r24, r26
     594:	9b 2f       	mov	r25, r27
     596:	0e 94 40 11 	call	0x2280	; 0x2280 <memcpy>
     59a:	08 95       	ret

0000059c <_Z23acil_encode_cmd_connectPhP24aci_cmd_params_connect_t>:
}

void acil_encode_cmd_connect(uint8_t *buffer, aci_cmd_params_connect_t *p_aci_cmd_params_connect)
{
     59c:	fc 01       	movw	r30, r24
     59e:	db 01       	movw	r26, r22
  *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_CONNECT_LEN;
     5a0:	85 e0       	ldi	r24, 0x05	; 5
     5a2:	80 83       	st	Z, r24
  *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_CONNECT;
     5a4:	8f e0       	ldi	r24, 0x0F	; 15
     5a6:	81 83       	std	Z+1, r24	; 0x01
  *(buffer + OFFSET_ACI_CMD_T_CONNECT + OFFSET_ACI_CMD_PARAMS_CONNECT_T_TIMEOUT_MSB) = (uint8_t)(p_aci_cmd_params_connect->timeout >> 8);
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	8c 91       	ld	r24, X
     5ac:	11 97       	sbiw	r26, 0x01	; 1
     5ae:	83 83       	std	Z+3, r24	; 0x03
  *(buffer + OFFSET_ACI_CMD_T_CONNECT + OFFSET_ACI_CMD_PARAMS_CONNECT_T_TIMEOUT_LSB) = (uint8_t)(p_aci_cmd_params_connect->timeout);
     5b0:	8c 91       	ld	r24, X
     5b2:	82 83       	std	Z+2, r24	; 0x02
  *(buffer + OFFSET_ACI_CMD_T_CONNECT + OFFSET_ACI_CMD_PARAMS_CONNECT_T_ADV_INTERVAL_MSB) = (uint8_t)(p_aci_cmd_params_connect->adv_interval >> 8);
     5b4:	13 96       	adiw	r26, 0x03	; 3
     5b6:	8c 91       	ld	r24, X
     5b8:	13 97       	sbiw	r26, 0x03	; 3
     5ba:	85 83       	std	Z+5, r24	; 0x05
  *(buffer + OFFSET_ACI_CMD_T_CONNECT + OFFSET_ACI_CMD_PARAMS_CONNECT_T_ADV_INTERVAL_LSB) = (uint8_t)(p_aci_cmd_params_connect->adv_interval);
     5bc:	12 96       	adiw	r26, 0x02	; 2
     5be:	8c 91       	ld	r24, X
     5c0:	84 83       	std	Z+4, r24	; 0x04
     5c2:	08 95       	ret

000005c4 <_Z26acil_encode_baseband_resetPh>:
  *(buffer + OFFSET_ACI_CMD_T_DISCONNECT + OFFSET_ACI_CMD_PARAMS_DISCONNECT_T_REASON) = (uint8_t)(p_aci_cmd_params_disconnect->reason);
}

void acil_encode_baseband_reset(uint8_t *buffer)
{
  *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_BASEBAND_RESET_LEN;
     5c4:	21 e0       	ldi	r18, 0x01	; 1
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 83       	st	Z, r18
  *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_RADIO_RESET;
     5ca:	2e e0       	ldi	r18, 0x0E	; 14
     5cc:	21 83       	std	Z+1, r18	; 0x01
     5ce:	08 95       	ret

000005d0 <_Z25acil_encode_cmd_send_dataPhP26aci_cmd_params_send_data_th>:
  *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_GET_DEVICE_ADDR_LEN;
  *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_GET_DEVICE_ADDRESS;
}

void acil_encode_cmd_send_data(uint8_t *buffer, aci_cmd_params_send_data_t *p_aci_cmd_params_send_data_t, uint8_t data_size)
{
     5d0:	dc 01       	movw	r26, r24
  *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_SEND_DATA_BASE_LEN + data_size;
     5d2:	84 2f       	mov	r24, r20
     5d4:	8e 5f       	subi	r24, 0xFE	; 254
     5d6:	8c 93       	st	X, r24
  *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SEND_DATA;
     5d8:	85 e1       	ldi	r24, 0x15	; 21
     5da:	11 96       	adiw	r26, 0x01	; 1
     5dc:	8c 93       	st	X, r24
     5de:	11 97       	sbiw	r26, 0x01	; 1
  *(buffer + OFFSET_ACI_CMD_T_SEND_DATA + OFFSET_ACI_CMD_PARAMS_SEND_DATA_T_TX_DATA + OFFSET_ACI_TX_DATA_T_PIPE_NUMBER) = p_aci_cmd_params_send_data_t->tx_data.pipe_number;
     5e0:	e6 2f       	mov	r30, r22
     5e2:	f7 2f       	mov	r31, r23
     5e4:	81 91       	ld	r24, Z+
     5e6:	12 96       	adiw	r26, 0x02	; 2
     5e8:	8c 93       	st	X, r24
     5ea:	12 97       	sbiw	r26, 0x02	; 2
  memcpy((buffer + OFFSET_ACI_CMD_T_SEND_DATA + OFFSET_ACI_CMD_PARAMS_SEND_DATA_T_TX_DATA + OFFSET_ACI_TX_DATA_T_ACI_DATA), &(p_aci_cmd_params_send_data_t->tx_data.aci_data[0]), data_size);
     5ec:	13 96       	adiw	r26, 0x03	; 3
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	6e 2f       	mov	r22, r30
     5f2:	7f 2f       	mov	r23, r31
     5f4:	8a 2f       	mov	r24, r26
     5f6:	9b 2f       	mov	r25, r27
     5f8:	0e 94 40 11 	call	0x2280	; 0x2280 <memcpy>
     5fc:	08 95       	ret

000005fe <_Z42acil_encode_cmd_change_timing_req_GAP_PPCPPh>:
  *(buffer + OFFSET_ACI_CMD_T_SET_APP_LATENCY + OFFSET_ACI_CMD_PARAMS_SET_APP_LATENCY_T_LATENCY_LSB) = (uint8_t)( p_aci_cmd_params_set_app_latency->latency);
}

void acil_encode_cmd_change_timing_req_GAP_PPCP(uint8_t *buffer)
{
  *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_CHANGE_TIMING_LEN_GAP_PPCP;
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
  *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_CHANGE_TIMING;
     604:	23 e1       	ldi	r18, 0x13	; 19
     606:	21 83       	std	Z+1, r18	; 0x01
     608:	08 95       	ret

0000060a <_Z14aci_setup_fillP11aci_state_tPh>:
/*                        offset is updated to the new index after the queue is filled     */
/*                        or the last message us placed in the queue                       */
/* Returns                void                                                             */
/***************************************************************************/
void aci_setup_fill(aci_state_t *aci_stat, uint8_t *num_cmd_offset)
{
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
     616:	8b 01       	movw	r16, r22
    
  while (*num_cmd_offset < aci_stat->aci_setup_info.num_setup_msgs)
     618:	fb 01       	movw	r30, r22
     61a:	80 81       	ld	r24, Z
     61c:	99 89       	ldd	r25, Y+17	; 0x11
     61e:	89 17       	cp	r24, r25
     620:	08 f5       	brcc	.+66     	; 0x664 <_Z14aci_setup_fillP11aci_state_tPh+0x5a>
  {
    //Copy the setup ACI message from Flash to RAM
    //Add 2 bytes to the length byte for status byte, length for the total number of bytes
    memcpy_P(&msg_to_send, &(aci_stat->aci_setup_info.setup_msgs[*num_cmd_offset]), 
              pgm_read_byte_near(&(aci_stat->aci_setup_info.setup_msgs[*num_cmd_offset].buffer[0]))+2); 
     622:	0f 2e       	mov	r0, r31
     624:	f1 e2       	ldi	r31, 0x21	; 33
     626:	ff 2e       	mov	r15, r31
     628:	f0 2d       	mov	r31, r0
     62a:	6f 85       	ldd	r22, Y+15	; 0x0f
     62c:	78 89       	ldd	r23, Y+16	; 0x10
     62e:	f8 9e       	mul	r15, r24
     630:	60 0d       	add	r22, r0
     632:	71 1d       	adc	r23, r1
     634:	11 24       	eor	r1, r1
     636:	fb 01       	movw	r30, r22
     638:	31 96       	adiw	r30, 0x01	; 1
     63a:	44 91       	lpm	r20, Z
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	4e 5f       	subi	r20, 0xFE	; 254
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	84 ed       	ldi	r24, 0xD4	; 212
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0e 94 37 11 	call	0x226e	; 0x226e <memcpy_P>
    
    //Put the Setup ACI message in the command queue
    if (!hal_aci_tl_send(&msg_to_send))
     64a:	84 ed       	ldi	r24, 0xD4	; 212
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z15hal_aci_tl_sendP14hal_aci_data_t>
     652:	88 23       	and	r24, r24
     654:	39 f0       	breq	.+14     	; 0x664 <_Z14aci_setup_fillP11aci_state_tPh+0x5a>
		//ACI Command Queue is full
		// *num_cmd_offset is now pointing to the index of the Setup command that did not get sent
		return;
    }
    
    (*num_cmd_offset)++;
     656:	f8 01       	movw	r30, r16
     658:	80 81       	ld	r24, Z
     65a:	8f 5f       	subi	r24, 0xFF	; 255
     65c:	80 83       	st	Z, r24
/* Returns                void                                                             */
/***************************************************************************/
void aci_setup_fill(aci_state_t *aci_stat, uint8_t *num_cmd_offset)
{
    
  while (*num_cmd_offset < aci_stat->aci_setup_info.num_setup_msgs)
     65e:	99 89       	ldd	r25, Y+17	; 0x11
     660:	89 17       	cp	r24, r25
     662:	18 f3       	brcs	.-58     	; 0x62a <_Z14aci_setup_fillP11aci_state_tPh+0x20>
    }
    
    (*num_cmd_offset)++;
  }
 
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	08 95       	ret

00000670 <_Z12do_aci_setupP11aci_state_t>:

  

aci_status_code_t do_aci_setup(aci_state_t *aci_stat)
{
     670:	6f 92       	push	r6
     672:	7f 92       	push	r7
     674:	8f 92       	push	r8
     676:	9f 92       	push	r9
     678:	af 92       	push	r10
     67a:	bf 92       	push	r11
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	1f 92       	push	r1
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	7c 01       	movw	r14, r24
  uint8_t setup_offset     = 0;
     694:	19 82       	std	Y+1, r1	; 0x01
  buffer when receiving
  */
  hal_aci_evt_t  *aci_data = (hal_aci_evt_t *)&msg_to_send;
  
  
  aci_evt->params.cmd_rsp.cmd_status = ACI_STATUS_ERROR_CRC_MISMATCH;
     696:	88 e8       	ldi	r24, 0x88	; 136
     698:	80 93 03 00 	sts	0x0003, r24
     69c:	0f ef       	ldi	r16, 0xFF	; 255
     69e:	1f ef       	ldi	r17, 0xFF	; 255

aci_status_code_t do_aci_setup(aci_state_t *aci_stat)
{
  uint8_t setup_offset     = 0;
  uint16_t i               = 0x0000;
  aci_evt_t * aci_evt      = NULL;
     6a0:	c1 2c       	mov	r12, r1
     6a2:	d1 2c       	mov	r13, r1
	
    if (true == lib_aci_event_get(aci_stat, aci_data))
    {
		  aci_evt = &(aci_data->evt);
		  
		  if (ACI_EVT_CMD_RSP != aci_evt->evt_opcode )
     6a4:	0f 2e       	mov	r0, r31
     6a6:	f6 ed       	ldi	r31, 0xD6	; 214
     6a8:	af 2e       	mov	r10, r31
     6aa:	f2 e0       	ldi	r31, 0x02	; 2
     6ac:	bf 2e       	mov	r11, r31
     6ae:	f0 2d       	mov	r31, r0
		  {
			  //Got something other than a command response evt -> Error
			  return ACI_STATUS_ERROR_INTERNAL;
		  }      
      
		  switch (aci_evt->params.cmd_rsp.cmd_status)
     6b0:	0f 2e       	mov	r0, r31
     6b2:	f8 ed       	ldi	r31, 0xD8	; 216
     6b4:	6f 2e       	mov	r6, r31
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	7f 2e       	mov	r7, r31
     6ba:	f0 2d       	mov	r31, r0
		return ACI_STATUS_ERROR_INTERNAL;	
	}
	
    if (true == lib_aci_event_get(aci_stat, aci_data))
    {
		  aci_evt = &(aci_data->evt);
     6bc:	0f 2e       	mov	r0, r31
     6be:	f5 ed       	ldi	r31, 0xD5	; 213
     6c0:	8f 2e       	mov	r8, r31
     6c2:	f2 e0       	ldi	r31, 0x02	; 2
     6c4:	9f 2e       	mov	r9, r31
     6c6:	f0 2d       	mov	r31, r0
  
  aci_evt->params.cmd_rsp.cmd_status = ACI_STATUS_ERROR_CRC_MISMATCH;
 
  while (aci_evt->params.cmd_rsp.cmd_status != ACI_STATUS_TRANSACTION_COMPLETE)
  {	  
	if (setup_offset < aci_stat->aci_setup_info.num_setup_msgs)
     6c8:	f7 01       	movw	r30, r14
     6ca:	91 89       	ldd	r25, Z+17	; 0x11
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	89 17       	cp	r24, r25
     6d0:	30 f4       	brcc	.+12     	; 0x6de <_Z12do_aci_setupP11aci_state_t+0x6e>
	{
		aci_setup_fill(aci_stat,  &setup_offset);
     6d2:	be 01       	movw	r22, r28
     6d4:	6f 5f       	subi	r22, 0xFF	; 255
     6d6:	7f 4f       	sbci	r23, 0xFF	; 255
     6d8:	c7 01       	movw	r24, r14
     6da:	0e 94 05 03 	call	0x60a	; 0x60a <_Z14aci_setup_fillP11aci_state_tPh>
     6de:	01 50       	subi	r16, 0x01	; 1
     6e0:	11 09       	sbc	r17, r1
	}

	i++; //i is used as a guard counter, if this counter overflows, there is an error	
	if (i > 0xFFFE)
     6e2:	b9 f0       	breq	.+46     	; 0x712 <_Z12do_aci_setupP11aci_state_t+0xa2>
	{
		return ACI_STATUS_ERROR_INTERNAL;	
	}
	
    if (true == lib_aci_event_get(aci_stat, aci_data))
     6e4:	64 ed       	ldi	r22, 0xD4	; 212
     6e6:	72 e0       	ldi	r23, 0x02	; 2
     6e8:	c7 01       	movw	r24, r14
     6ea:	0e 94 d0 06 	call	0xda0	; 0xda0 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t>
     6ee:	88 23       	and	r24, r24
     6f0:	59 f0       	breq	.+22     	; 0x708 <_Z12do_aci_setupP11aci_state_t+0x98>
    {
		  aci_evt = &(aci_data->evt);
		  
		  if (ACI_EVT_CMD_RSP != aci_evt->evt_opcode )
     6f2:	f5 01       	movw	r30, r10
     6f4:	80 81       	ld	r24, Z
     6f6:	84 38       	cpi	r24, 0x84	; 132
     6f8:	71 f4       	brne	.+28     	; 0x716 <_Z12do_aci_setupP11aci_state_t+0xa6>
		  {
			  //Got something other than a command response evt -> Error
			  return ACI_STATUS_ERROR_INTERNAL;
		  }      
      
		  switch (aci_evt->params.cmd_rsp.cmd_status)
     6fa:	f3 01       	movw	r30, r6
     6fc:	80 81       	ld	r24, Z
     6fe:	98 2f       	mov	r25, r24
     700:	91 50       	subi	r25, 0x01	; 1
     702:	92 30       	cpi	r25, 0x02	; 2
     704:	48 f4       	brcc	.+18     	; 0x718 <_Z12do_aci_setupP11aci_state_t+0xa8>
		return ACI_STATUS_ERROR_INTERNAL;	
	}
	
    if (true == lib_aci_event_get(aci_stat, aci_data))
    {
		  aci_evt = &(aci_data->evt);
     706:	64 01       	movw	r12, r8
  hal_aci_evt_t  *aci_data = (hal_aci_evt_t *)&msg_to_send;
  
  
  aci_evt->params.cmd_rsp.cmd_status = ACI_STATUS_ERROR_CRC_MISMATCH;
 
  while (aci_evt->params.cmd_rsp.cmd_status != ACI_STATUS_TRANSACTION_COMPLETE)
     708:	f6 01       	movw	r30, r12
     70a:	83 81       	ldd	r24, Z+3	; 0x03
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	e1 f6       	brne	.-72     	; 0x6c8 <_Z12do_aci_setupP11aci_state_t+0x58>
     710:	03 c0       	rjmp	.+6      	; 0x718 <_Z12do_aci_setupP11aci_state_t+0xa8>
	}

	i++; //i is used as a guard counter, if this counter overflows, there is an error	
	if (i > 0xFFFE)
	{
		return ACI_STATUS_ERROR_INTERNAL;	
     712:	81 e8       	ldi	r24, 0x81	; 129
     714:	01 c0       	rjmp	.+2      	; 0x718 <_Z12do_aci_setupP11aci_state_t+0xa8>
		  aci_evt = &(aci_data->evt);
		  
		  if (ACI_EVT_CMD_RSP != aci_evt->evt_opcode )
		  {
			  //Got something other than a command response evt -> Error
			  return ACI_STATUS_ERROR_INTERNAL;
     716:	81 e8       	ldi	r24, 0x81	; 129
		  } 
	}
  }
  
  return (aci_status_code_t)aci_evt->params.cmd_rsp.cmd_status;
}
     718:	0f 90       	pop	r0
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	9f 90       	pop	r9
     730:	8f 90       	pop	r8
     732:	7f 90       	pop	r7
     734:	6f 90       	pop	r6
     736:	08 95       	ret

00000738 <_ZL12m_aci_q_initP11aci_queue_t>:
aci_queue_t    aci_rx_q;

static aci_pins_t	 *a_pins_local_ptr;

static void m_aci_q_init(aci_queue_t *aci_q)
{
     738:	fc 01       	movw	r30, r24
  uint8_t loop;
  
  aci_debug_print = false;
     73a:	10 92 b0 02 	sts	0x02B0, r1
  aci_q->head = 0;
     73e:	dc 01       	movw	r26, r24
     740:	ac 57       	subi	r26, 0x7C	; 124
     742:	bf 4f       	sbci	r27, 0xFF	; 255
     744:	1c 92       	st	X, r1
  aci_q->tail = 0;
     746:	dc 01       	movw	r26, r24
     748:	ab 57       	subi	r26, 0x7B	; 123
     74a:	bf 4f       	sbci	r27, 0xFF	; 255
     74c:	1c 92       	st	X, r1
  for(loop=0; loop<ACI_QUEUE_SIZE; loop++)
  {
    aci_q->aci_data[loop].buffer[0] = 0x00;
     74e:	11 82       	std	Z+1, r1	; 0x01
    aci_q->aci_data[loop].buffer[1] = 0x00;
     750:	12 82       	std	Z+2, r1	; 0x02
  aci_debug_print = false;
  aci_q->head = 0;
  aci_q->tail = 0;
  for(loop=0; loop<ACI_QUEUE_SIZE; loop++)
  {
    aci_q->aci_data[loop].buffer[0] = 0x00;
     752:	12 a2       	std	Z+34, r1	; 0x22
    aci_q->aci_data[loop].buffer[1] = 0x00;
     754:	13 a2       	std	Z+35, r1	; 0x23
  aci_debug_print = false;
  aci_q->head = 0;
  aci_q->tail = 0;
  for(loop=0; loop<ACI_QUEUE_SIZE; loop++)
  {
    aci_q->aci_data[loop].buffer[0] = 0x00;
     756:	dc 01       	movw	r26, r24
     758:	ad 5b       	subi	r26, 0xBD	; 189
     75a:	bf 4f       	sbci	r27, 0xFF	; 255
     75c:	1c 92       	st	X, r1
    aci_q->aci_data[loop].buffer[1] = 0x00;
     75e:	dc 01       	movw	r26, r24
     760:	ac 5b       	subi	r26, 0xBC	; 188
     762:	bf 4f       	sbci	r27, 0xFF	; 255
     764:	1c 92       	st	X, r1
  aci_debug_print = false;
  aci_q->head = 0;
  aci_q->tail = 0;
  for(loop=0; loop<ACI_QUEUE_SIZE; loop++)
  {
    aci_q->aci_data[loop].buffer[0] = 0x00;
     766:	dc 01       	movw	r26, r24
     768:	ac 59       	subi	r26, 0x9C	; 156
     76a:	bf 4f       	sbci	r27, 0xFF	; 255
     76c:	1c 92       	st	X, r1
    aci_q->aci_data[loop].buffer[1] = 0x00;
     76e:	eb 59       	subi	r30, 0x9B	; 155
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	10 82       	st	Z, r1
     774:	08 95       	ret

00000776 <_ZL13spi_readwriteh>:
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     776:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
     778:	0d b4       	in	r0, 0x2d	; 45
     77a:	07 fe       	sbrs	r0, 7
     77c:	fd cf       	rjmp	.-6      	; 0x778 <_ZL13spi_readwriteh+0x2>
    ;
  return SPDR;
     77e:	8e b5       	in	r24, 0x2e	; 46
}

static uint8_t spi_readwrite(const uint8_t aci_byte)
{
	return SPI.transfer(aci_byte);
}
     780:	08 95       	ret

00000782 <_ZL15m_aci_q_dequeueP11aci_queue_tP14hal_aci_data_t>:
}

//@comment after a port to a new mcu have test for the queue states, esp. the full and the empty states
static bool m_aci_q_dequeue(aci_queue_t *aci_q, hal_aci_data_t *p_data)
{
  if (aci_q->head == aci_q->tail)
     782:	fc 01       	movw	r30, r24
     784:	ec 57       	subi	r30, 0x7C	; 124
     786:	ff 4f       	sbci	r31, 0xFF	; 255
     788:	20 81       	ld	r18, Z
     78a:	fc 01       	movw	r30, r24
     78c:	eb 57       	subi	r30, 0x7B	; 123
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	30 81       	ld	r19, Z
     792:	23 17       	cp	r18, r19
     794:	b9 f0       	breq	.+46     	; 0x7c4 <_ZL15m_aci_q_dequeueP11aci_queue_tP14hal_aci_data_t+0x42>
  {
    /* empty queue */
    return false;
  }
  
  memcpy((uint8_t *)p_data, (uint8_t *)&(aci_q->aci_data[aci_q->head]), sizeof(hal_aci_data_t));
     796:	fc 01       	movw	r30, r24
     798:	31 e2       	ldi	r19, 0x21	; 33
     79a:	23 9f       	mul	r18, r19
     79c:	e0 0d       	add	r30, r0
     79e:	f1 1d       	adc	r31, r1
     7a0:	11 24       	eor	r1, r1
     7a2:	21 e2       	ldi	r18, 0x21	; 33
     7a4:	db 01       	movw	r26, r22
     7a6:	01 90       	ld	r0, Z+
     7a8:	0d 92       	st	X+, r0
     7aa:	2a 95       	dec	r18
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <_ZL15m_aci_q_dequeueP11aci_queue_tP14hal_aci_data_t+0x24>
  aci_q->head = (aci_q->head + 1) % ACI_QUEUE_SIZE;
     7ae:	fc 01       	movw	r30, r24
     7b0:	ec 57       	subi	r30, 0x7C	; 124
     7b2:	ff 4f       	sbci	r31, 0xFF	; 255
     7b4:	80 81       	ld	r24, Z
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	83 70       	andi	r24, 0x03	; 3
     7bc:	90 78       	andi	r25, 0x80	; 128
     7be:	80 83       	st	Z, r24
  
  return true;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	08 95       	ret
static bool m_aci_q_dequeue(aci_queue_t *aci_q, hal_aci_data_t *p_data)
{
  if (aci_q->head == aci_q->tail)
  {
    /* empty queue */
    return false;
     7c4:	80 e0       	ldi	r24, 0x00	; 0
  
  memcpy((uint8_t *)p_data, (uint8_t *)&(aci_q->aci_data[aci_q->head]), sizeof(hal_aci_data_t));
  aci_q->head = (aci_q->head + 1) % ACI_QUEUE_SIZE;
  
  return true;
}
     7c6:	08 95       	ret

000007c8 <_ZL16m_print_aci_dataP14hal_aci_data_t>:
}



void m_print_aci_data(hal_aci_data_t *p_data)
{
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	ec 01       	movw	r28, r24
  const uint8_t length = p_data->buffer[0];
     7d2:	09 81       	ldd	r16, Y+1	; 0x01
  uint8_t i;
  Serial.print(length, DEC);
     7d4:	4a e0       	ldi	r20, 0x0A	; 10
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	60 2f       	mov	r22, r16
     7da:	82 e7       	ldi	r24, 0x72	; 114
     7dc:	94 e0       	ldi	r25, 0x04	; 4
     7de:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN5Print5printEhi>
  Serial.print(" :");
     7e2:	63 e2       	ldi	r22, 0x23	; 35
     7e4:	71 e0       	ldi	r23, 0x01	; 1
     7e6:	82 e7       	ldi	r24, 0x72	; 114
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
  for (i=0; i<=length; i++)
     7ee:	10 e0       	ldi	r17, 0x00	; 0
  {
    Serial.print(p_data->buffer[i], HEX);
     7f0:	fe 01       	movw	r30, r28
     7f2:	e1 0f       	add	r30, r17
     7f4:	f1 1d       	adc	r31, r1
     7f6:	40 e1       	ldi	r20, 0x10	; 16
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	61 81       	ldd	r22, Z+1	; 0x01
     7fc:	82 e7       	ldi	r24, 0x72	; 114
     7fe:	94 e0       	ldi	r25, 0x04	; 4
     800:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN5Print5printEhi>
    Serial.print(F(", "));
     804:	68 e6       	ldi	r22, 0x68	; 104
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	82 e7       	ldi	r24, 0x72	; 114
     80a:	94 e0       	ldi	r25, 0x04	; 4
     80c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN5Print5printEPK19__FlashStringHelper>
{
  const uint8_t length = p_data->buffer[0];
  uint8_t i;
  Serial.print(length, DEC);
  Serial.print(" :");
  for (i=0; i<=length; i++)
     810:	1f 5f       	subi	r17, 0xFF	; 255
     812:	01 17       	cp	r16, r17
     814:	68 f7       	brcc	.-38     	; 0x7f0 <_ZL16m_print_aci_dataP14hal_aci_data_t+0x28>
  {
    Serial.print(p_data->buffer[i], HEX);
    Serial.print(F(", "));
  }
  Serial.println(F(""));
     816:	6b e6       	ldi	r22, 0x6B	; 107
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	82 e7       	ldi	r24, 0x72	; 114
     81c:	94 e0       	ldi	r25, 0x04	; 4
     81e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <_Z19hal_aci_debug_printb>:
  }
}

void hal_aci_debug_print(bool enable)
{
	aci_debug_print = enable;
     82c:	80 93 b0 02 	sts	0x02B0, r24
     830:	08 95       	ret

00000832 <_Z15m_aci_q_enqueueP11aci_queue_tP14hal_aci_data_t>:
}

bool m_aci_q_enqueue(aci_queue_t *aci_q, hal_aci_data_t *p_data)
{
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	ec 01       	movw	r28, r24
  const uint8_t next = (aci_q->tail + 1) % ACI_QUEUE_SIZE;
     83a:	fc 01       	movw	r30, r24
     83c:	eb 57       	subi	r30, 0x7B	; 123
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	20 81       	ld	r18, Z
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	c9 01       	movw	r24, r18
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	83 70       	andi	r24, 0x03	; 3
     84a:	90 78       	andi	r25, 0x80	; 128
     84c:	18 2f       	mov	r17, r24
  const uint8_t length = p_data->buffer[0];
     84e:	fb 01       	movw	r30, r22
     850:	a1 81       	ldd	r26, Z+1	; 0x01
  
  if (next == aci_q->head)
     852:	fe 01       	movw	r30, r28
     854:	ec 57       	subi	r30, 0x7C	; 124
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	80 81       	ld	r24, Z
     85a:	81 17       	cp	r24, r17
     85c:	01 f1       	breq	.+64     	; 0x89e <_Z15m_aci_q_enqueueP11aci_queue_tP14hal_aci_data_t+0x6c>
  {
    /* full queue */
    return false;
  }
  aci_q->aci_data[aci_q->tail].status_byte = 0;
     85e:	81 e2       	ldi	r24, 0x21	; 33
     860:	82 9f       	mul	r24, r18
     862:	a0 01       	movw	r20, r0
     864:	83 9f       	mul	r24, r19
     866:	50 0d       	add	r21, r0
     868:	11 24       	eor	r1, r1
     86a:	fe 01       	movw	r30, r28
     86c:	e4 0f       	add	r30, r20
     86e:	f5 1f       	adc	r31, r21
     870:	10 82       	st	Z, r1
  
  memcpy((uint8_t *)&(aci_q->aci_data[aci_q->tail].buffer[0]), (uint8_t *)&p_data->buffer[0], length + 1);
     872:	9a 01       	movw	r18, r20
     874:	2f 5f       	subi	r18, 0xFF	; 255
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	2c 0f       	add	r18, r28
     87a:	3d 1f       	adc	r19, r29
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	11 96       	adiw	r26, 0x01	; 1
     880:	fb 01       	movw	r30, r22
     882:	31 96       	adiw	r30, 0x01	; 1
     884:	4a 2f       	mov	r20, r26
     886:	5b 2f       	mov	r21, r27
     888:	6e 2f       	mov	r22, r30
     88a:	7f 2f       	mov	r23, r31
     88c:	82 2f       	mov	r24, r18
     88e:	93 2f       	mov	r25, r19
     890:	0e 94 40 11 	call	0x2280	; 0x2280 <memcpy>
  aci_q->tail = next;
     894:	cb 57       	subi	r28, 0x7B	; 123
     896:	df 4f       	sbci	r29, 0xFF	; 255
     898:	18 83       	st	Y, r17
  
  return true;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <_Z15m_aci_q_enqueueP11aci_queue_tP14hal_aci_data_t+0x6e>
  const uint8_t length = p_data->buffer[0];
  
  if (next == aci_q->head)
  {
    /* full queue */
    return false;
     89e:	80 e0       	ldi	r24, 0x00	; 0
  
  memcpy((uint8_t *)&(aci_q->aci_data[aci_q->tail].buffer[0]), (uint8_t *)&p_data->buffer[0], length + 1);
  aci_q->tail = next;
  
  return true;
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	08 95       	ret

000008a8 <_Z16m_aci_q_is_emptyP11aci_queue_t>:
  return true;
}

bool m_aci_q_is_empty(aci_queue_t *aci_q)
{
  return (aci_q->head == aci_q->tail);
     8a8:	dc 01       	movw	r26, r24
     8aa:	ac 57       	subi	r26, 0x7C	; 124
     8ac:	bf 4f       	sbci	r27, 0xFF	; 255
     8ae:	fc 01       	movw	r30, r24
     8b0:	eb 57       	subi	r30, 0x7B	; 123
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	2c 91       	ld	r18, X
     8b8:	90 81       	ld	r25, Z
     8ba:	29 13       	cpse	r18, r25
     8bc:	80 e0       	ldi	r24, 0x00	; 0
}
     8be:	08 95       	ret

000008c0 <_Z15m_aci_q_is_fullP11aci_queue_t>:
{
  uint8_t next;
  bool state;
  
  //This should be done in a critical section
  noInterrupts();
     8c0:	f8 94       	cli
  next = (aci_q->tail + 1) % ACI_QUEUE_SIZE;  
     8c2:	fc 01       	movw	r30, r24
     8c4:	eb 57       	subi	r30, 0x7B	; 123
     8c6:	ff 4f       	sbci	r31, 0xFF	; 255
     8c8:	20 81       	ld	r18, Z
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	2f 5f       	subi	r18, 0xFF	; 255
     8ce:	3f 4f       	sbci	r19, 0xFF	; 255
     8d0:	23 70       	andi	r18, 0x03	; 3
     8d2:	30 78       	andi	r19, 0x80	; 128
  
  if (next == aci_q->head)
     8d4:	fc 01       	movw	r30, r24
     8d6:	ec 57       	subi	r30, 0x7C	; 124
     8d8:	ff 4f       	sbci	r31, 0xFF	; 255
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 81       	ld	r25, Z
     8de:	92 13       	cpse	r25, r18
     8e0:	80 e0       	ldi	r24, 0x00	; 0
  else
  {
    state = false;
  }
  
  interrupts();
     8e2:	78 94       	sei
  //end
  
  return state;
}
     8e4:	08 95       	ret

000008e6 <_Z20hal_aci_tl_event_getP14hal_aci_data_t>:
    }    
  }
}

bool hal_aci_tl_event_get(hal_aci_data_t *p_aci_data)
{
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	ec 01       	movw	r28, r24
  bool was_full = m_aci_q_is_full(&aci_rx_q);
     8ee:	84 ea       	ldi	r24, 0xA4	; 164
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_Z15m_aci_q_is_fullP11aci_queue_t>
     8f6:	18 2f       	mov	r17, r24
  
  if (m_aci_q_dequeue(&aci_rx_q, p_aci_data))
     8f8:	be 01       	movw	r22, r28
     8fa:	84 ea       	ldi	r24, 0xA4	; 164
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 c1 03 	call	0x782	; 0x782 <_ZL15m_aci_q_dequeueP11aci_queue_tP14hal_aci_data_t>
     902:	88 23       	and	r24, r24
     904:	c9 f0       	breq	.+50     	; 0x938 <__stack+0x39>
  {
    if (true == aci_debug_print)
     906:	80 91 b0 02 	lds	r24, 0x02B0
     90a:	88 23       	and	r24, r24
     90c:	49 f0       	breq	.+18     	; 0x920 <__stack+0x21>
    {
      Serial.print(" E");
     90e:	66 e2       	ldi	r22, 0x26	; 38
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	82 e7       	ldi	r24, 0x72	; 114
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
      m_print_aci_data(p_aci_data);
     91a:	ce 01       	movw	r24, r28
     91c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZL16m_print_aci_dataP14hal_aci_data_t>
    }
    
    if (was_full)
     920:	11 23       	and	r17, r17
     922:	61 f0       	breq	.+24     	; 0x93c <__stack+0x3d>
    {
	  if (true == a_pins_local_ptr->interface_is_interrupt)
     924:	e0 91 b1 02 	lds	r30, 0x02B1
     928:	f0 91 b2 02 	lds	r31, 0x02B2
     92c:	82 85       	ldd	r24, Z+10	; 0x0a
     92e:	88 23       	and	r24, r24
     930:	39 f0       	breq	.+14     	; 0x940 <__stack+0x41>
	  {
#if defined(__SAM3X8E__)
  // nothing here, but we need to do as this, compiler bug?
#else
		/* Enable RDY line interrupt again */
		EIMSK |= (0x2);
     932:	e9 9a       	sbi	0x1d, 1	; 29
#endif
	  }
    }
    return true;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	05 c0       	rjmp	.+10     	; 0x942 <__stack+0x43>
  }
  else
  {
    return false;
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	03 c0       	rjmp	.+6      	; 0x942 <__stack+0x43>
		/* Enable RDY line interrupt again */
		EIMSK |= (0x2);
#endif
	  }
    }
    return true;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	01 c0       	rjmp	.+2      	; 0x942 <__stack+0x43>
     940:	81 e0       	ldi	r24, 0x01	; 1
  }
  else
  {
    return false;
  }
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	08 95       	ret

0000094a <_Z15hal_aci_tl_sendP14hal_aci_data_t>:
	attachInterrupt(a_pins->interrupt_number, m_rdy_line_handle, LOW); // We use the LOW level of the RDYN line as the atmega328 can wakeup from sleep only on LOW  
  }
}

bool hal_aci_tl_send(hal_aci_data_t *p_aci_cmd)
{
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ec 01       	movw	r28, r24
  const uint8_t length = p_aci_cmd->buffer[0];
  bool ret_val = false;

  if (length > HAL_ACI_MAX_LENGTH)
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	80 32       	cpi	r24, 0x20	; 32
     956:	e0 f4       	brcc	.+56     	; 0x990 <_Z15hal_aci_tl_sendP14hal_aci_data_t+0x46>
  {
    return false;
  }
  else
  {
    if (m_aci_q_enqueue(&aci_tx_q, p_aci_cmd))
     958:	be 01       	movw	r22, r28
     95a:	8a e2       	ldi	r24, 0x2A	; 42
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 19 04 	call	0x832	; 0x832 <_Z15m_aci_q_enqueueP11aci_queue_tP14hal_aci_data_t>
     962:	18 2f       	mov	r17, r24
    {
      ret_val = true;
    }
  }

  if (true == aci_debug_print)
     964:	80 91 b0 02 	lds	r24, 0x02B0
     968:	88 23       	and	r24, r24
     96a:	49 f0       	breq	.+18     	; 0x97e <_Z15hal_aci_tl_sendP14hal_aci_data_t+0x34>
  {
    Serial.print("C");
     96c:	69 e2       	ldi	r22, 0x29	; 41
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	82 e7       	ldi	r24, 0x72	; 114
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
    m_print_aci_data(p_aci_cmd);
     978:	ce 01       	movw	r24, r28
     97a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZL16m_print_aci_dataP14hal_aci_data_t>
  }
  
  digitalWrite(a_pins_local_ptr->reqn_pin, 0);
     97e:	e0 91 b1 02 	lds	r30, 0x02B1
     982:	f0 91 b2 02 	lds	r31, 0x02B2
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	81 81       	ldd	r24, Z+1	; 0x01
     98a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
  return ret_val;
     98e:	01 c0       	rjmp	.+2      	; 0x992 <_Z15hal_aci_tl_sendP14hal_aci_data_t+0x48>
  const uint8_t length = p_aci_cmd->buffer[0];
  bool ret_val = false;

  if (length > HAL_ACI_MAX_LENGTH)
  {
    return false;
     990:	10 e0       	ldi	r17, 0x00	; 0
    m_print_aci_data(p_aci_cmd);
  }
  
  digitalWrite(a_pins_local_ptr->reqn_pin, 0);
  return ret_val;
}
     992:	81 2f       	mov	r24, r17
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	08 95       	ret

0000099c <_Z19hal_aci_tl_poll_getv>:



hal_aci_data_t * hal_aci_tl_poll_get(void)
{
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	a1 97       	sbiw	r28, 0x21	; 33
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61


 
    

  digitalWrite(a_pins_local_ptr->reqn_pin, 0);
     9bc:	e0 91 b1 02 	lds	r30, 0x02B1
     9c0:	f0 91 b2 02 	lds	r31, 0x02B2
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	81 81       	ldd	r24, Z+1	; 0x01
     9c8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
  
  // Receive from queue
  if (m_aci_q_dequeue(&aci_tx_q, &data_to_send) == false)
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	8a e2       	ldi	r24, 0x2A	; 42
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	0e 94 c1 03 	call	0x782	; 0x782 <_ZL15m_aci_q_dequeueP11aci_queue_tP14hal_aci_data_t>
     9da:	81 11       	cpse	r24, r1
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <_Z19hal_aci_tl_poll_getv+0x46>
  {
    /* queue was empty, nothing to send */
    data_to_send.status_byte = 0;
     9de:	19 82       	std	Y+1, r1	; 0x01
    data_to_send.buffer[0] = 0;
     9e0:	1a 82       	std	Y+2, r1	; 0x02
  
  //Change this if your mcu has DMA for the master SPI
  
  // Send length, receive header
  byte_sent_cnt = 0;
  received_data.status_byte = spi_readwrite(data_to_send.buffer[byte_sent_cnt++]);
     9e2:	8a 81       	ldd	r24, Y+2	; 0x02
     9e4:	0e 94 bb 03 	call	0x776	; 0x776 <_ZL13spi_readwriteh>
     9e8:	80 93 b3 02 	sts	0x02B3, r24
  // Send first byte, receive length from slave
  received_data.buffer[0] = spi_readwrite(data_to_send.buffer[byte_sent_cnt++]);
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	0e 94 bb 03 	call	0x776	; 0x776 <_ZL13spi_readwriteh>
     9f2:	80 93 b4 02 	sts	0x02B4, r24
  if (0 == data_to_send.buffer[0])
     9f6:	4a 81       	ldd	r20, Y+2	; 0x02
     9f8:	44 23       	and	r20, r20
     9fa:	51 f0       	breq	.+20     	; 0xa10 <_Z19hal_aci_tl_poll_getv+0x74>
  }
  else
  {
    // Set the maximum to the biggest size. One command byte is already sent
    max_bytes = (received_data.buffer[0] > (data_to_send.buffer[0] - 1)) 
      ? received_data.buffer[0] : (data_to_send.buffer[0] - 1);
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	41 50       	subi	r20, 0x01	; 1
     a00:	51 09       	sbc	r21, r1
     a02:	28 2f       	mov	r18, r24
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	24 17       	cp	r18, r20
     a08:	35 07       	cpc	r19, r21
     a0a:	0c f4       	brge	.+2      	; 0xa0e <_Z19hal_aci_tl_poll_getv+0x72>
     a0c:	9a 01       	movw	r18, r20
     a0e:	82 2f       	mov	r24, r18
     a10:	80 32       	cpi	r24, 0x20	; 32
     a12:	08 f0       	brcs	.+2      	; 0xa16 <_Z19hal_aci_tl_poll_getv+0x7a>
     a14:	8f e1       	ldi	r24, 0x1F	; 31
  {
    max_bytes = HAL_ACI_MAX_LENGTH;
  }

  // Transmit/receive the rest of the packet 
  for (byte_cnt = 0; byte_cnt < max_bytes; byte_cnt++)
     a16:	88 23       	and	r24, r24
     a18:	f1 f0       	breq	.+60     	; 0xa56 <_Z19hal_aci_tl_poll_getv+0xba>
     a1a:	8e 01       	movw	r16, r28
     a1c:	0c 5f       	subi	r16, 0xFC	; 252
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255
     a20:	0f 2e       	mov	r0, r31
     a22:	f5 eb       	ldi	r31, 0xB5	; 181
     a24:	ef 2e       	mov	r14, r31
     a26:	f2 e0       	ldi	r31, 0x02	; 2
     a28:	ff 2e       	mov	r15, r31
     a2a:	f0 2d       	mov	r31, r0
  return ret_val;
}



hal_aci_data_t * hal_aci_tl_poll_get(void)
     a2c:	81 50       	subi	r24, 0x01	; 1
     a2e:	0f 2e       	mov	r0, r31
     a30:	f5 e0       	ldi	r31, 0x05	; 5
     a32:	cf 2e       	mov	r12, r31
     a34:	d1 2c       	mov	r13, r1
     a36:	f0 2d       	mov	r31, r0
     a38:	cc 0e       	add	r12, r28
     a3a:	dd 1e       	adc	r13, r29
     a3c:	c8 0e       	add	r12, r24
     a3e:	d1 1c       	adc	r13, r1
  }

  // Transmit/receive the rest of the packet 
  for (byte_cnt = 0; byte_cnt < max_bytes; byte_cnt++)
  {
    received_data.buffer[byte_cnt+1] =  spi_readwrite(data_to_send.buffer[byte_sent_cnt++]);
     a40:	f8 01       	movw	r30, r16
     a42:	81 91       	ld	r24, Z+
     a44:	8f 01       	movw	r16, r30
     a46:	0e 94 bb 03 	call	0x776	; 0x776 <_ZL13spi_readwriteh>
     a4a:	f7 01       	movw	r30, r14
     a4c:	81 93       	st	Z+, r24
     a4e:	7f 01       	movw	r14, r30
  {
    max_bytes = HAL_ACI_MAX_LENGTH;
  }

  // Transmit/receive the rest of the packet 
  for (byte_cnt = 0; byte_cnt < max_bytes; byte_cnt++)
     a50:	0c 15       	cp	r16, r12
     a52:	1d 05       	cpc	r17, r13
     a54:	a9 f7       	brne	.-22     	; 0xa40 <_Z19hal_aci_tl_poll_getv+0xa4>
  {
    received_data.buffer[byte_cnt+1] =  spi_readwrite(data_to_send.buffer[byte_sent_cnt++]);
  }

  digitalWrite(a_pins_local_ptr->reqn_pin, 1);
     a56:	e0 91 b1 02 	lds	r30, 0x02B1
     a5a:	f0 91 b2 02 	lds	r31, 0x02B2
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	81 81       	ldd	r24, Z+1	; 0x01
     a62:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
  //RDYN should follow the REQN line in approx 100ns
  
#if defined(__SAM3X8E__)
  // nothing here, but we need to do as this, compiler bug?
#else
  sleep_enable();
     a66:	83 b7       	in	r24, 0x33	; 51
     a68:	81 60       	ori	r24, 0x01	; 1
     a6a:	83 bf       	out	0x33, r24	; 51
#endif
  if (a_pins_local_ptr->interface_is_interrupt)
     a6c:	e0 91 b1 02 	lds	r30, 0x02B1
     a70:	f0 91 b2 02 	lds	r31, 0x02B2
     a74:	82 85       	ldd	r24, Z+10	; 0x0a
     a76:	88 23       	and	r24, r24
     a78:	39 f0       	breq	.+14     	; 0xa88 <_Z19hal_aci_tl_poll_getv+0xec>
  {
	attachInterrupt(a_pins_local_ptr->interrupt_number, m_rdy_line_handle, LOW);	  
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	63 e6       	ldi	r22, 0x63	; 99
     a80:	75 e0       	ldi	r23, 0x05	; 5
     a82:	83 85       	ldd	r24, Z+11	; 0x0b
     a84:	0e 94 cd 0a 	call	0x159a	; 0x159a <attachInterrupt>
  }


  
  if (false == m_aci_q_is_empty(&aci_tx_q))
     a88:	8a e2       	ldi	r24, 0x2A	; 42
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z16m_aci_q_is_emptyP11aci_queue_t>
     a90:	81 11       	cpse	r24, r1
     a92:	08 c0       	rjmp	.+16     	; 0xaa4 <_Z19hal_aci_tl_poll_getv+0x108>
  {
    //Lower the REQN line to start a new ACI transaction         
    digitalWrite(a_pins_local_ptr->reqn_pin, 0); 
     a94:	e0 91 b1 02 	lds	r30, 0x02B1
     a98:	f0 91 b2 02 	lds	r31, 0x02B2
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	81 81       	ldd	r24, Z+1	; 0x01
     aa0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
  }
  
  /* valid Rx available or transmit finished*/
  return (&received_data);
}
     aa4:	83 eb       	ldi	r24, 0xB3	; 179
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	a1 96       	adiw	r28, 0x21	; 33
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	08 95       	ret

00000ac6 <_Z17m_rdy_line_handlev>:
  hal_aci_data_t *p_aci_data;
  
#if defined(__SAM3X8E__)
  // nothing here, but we need to do as this, compiler bug?
#else
  sleep_disable();
     ac6:	83 b7       	in	r24, 0x33	; 51
     ac8:	8e 7f       	andi	r24, 0xFE	; 254
     aca:	83 bf       	out	0x33, r24	; 51
#endif

  detachInterrupt(1);
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <detachInterrupt>
  
  // Receive or transmit data
  p_aci_data = hal_aci_tl_poll_get();
     ad2:	0e 94 ce 04 	call	0x99c	; 0x99c <_Z19hal_aci_tl_poll_getv>
  
  // Check if we received data
  if (p_aci_data->buffer[0] > 0)
     ad6:	fc 01       	movw	r30, r24
     ad8:	21 81       	ldd	r18, Z+1	; 0x01
     ada:	22 23       	and	r18, r18
     adc:	a9 f0       	breq	.+42     	; 0xb08 <_Z17m_rdy_line_handlev+0x42>
  {
    if (!m_aci_q_enqueue(&aci_rx_q, p_aci_data))
     ade:	bc 01       	movw	r22, r24
     ae0:	84 ea       	ldi	r24, 0xA4	; 164
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 19 04 	call	0x832	; 0x832 <_Z15m_aci_q_enqueueP11aci_queue_tP14hal_aci_data_t>
     ae8:	81 11       	cpse	r24, r1
     aea:	01 c0       	rjmp	.+2      	; 0xaee <_Z17m_rdy_line_handlev+0x28>
     aec:	ff cf       	rjmp	.-2      	; 0xaec <_Z17m_rdy_line_handlev+0x26>
         Should never happen.
         Spin in a while loop.
         */	  
       while(1);
    }
    if (m_aci_q_is_full(&aci_rx_q))
     aee:	84 ea       	ldi	r24, 0xA4	; 164
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_Z15m_aci_q_is_fullP11aci_queue_t>
     af6:	88 23       	and	r24, r24
     af8:	39 f0       	breq	.+14     	; 0xb08 <_Z17m_rdy_line_handlev+0x42>
    {
      /* Disable RDY line interrupt.
         Will latch any pending RDY lines, so when enabled it again this
         routine should be taken again */
	  if (true == a_pins_local_ptr->interface_is_interrupt)
     afa:	e0 91 b1 02 	lds	r30, 0x02B1
     afe:	f0 91 b2 02 	lds	r31, 0x02B2
     b02:	82 85       	ldd	r24, Z+10	; 0x0a
     b04:	81 11       	cpse	r24, r1
	  {
#if defined(__SAM3X8E__)
  // nothing here, but we need to do as this, compiler bug?
#else
		EIMSK &= ~(0x2);
     b06:	e9 98       	cbi	0x1d, 1	; 29
     b08:	08 95       	ret

00000b0a <_Z14m_aci_pins_setP10aci_pins_t>:
  interrupts();
}

void m_aci_pins_set(aci_pins_t *a_pins_ptr)
{
  a_pins_local_ptr = a_pins_ptr;	
     b0a:	90 93 b2 02 	sts	0x02B2, r25
     b0e:	80 93 b1 02 	sts	0x02B1, r24
     b12:	08 95       	ret

00000b14 <_Z15hal_aci_tl_initP10aci_pins_t>:
    return false;
  }
}

void hal_aci_tl_init(aci_pins_t *a_pins)
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ec 01       	movw	r28, r24
  received_data.buffer[0] = 0;
     b1a:	10 92 b4 02 	sts	0x02B4, r1
  
  m_aci_pins_set(a_pins);
     b1e:	0e 94 85 05 	call	0xb0a	; 0xb0a <_Z14m_aci_pins_setP10aci_pins_t>
  MISO MOSI and SCK
  Change here if the pins are mapped differently
  
  The SPI library assumes that the hardware pins are used
  */
  SPI.begin();
     b22:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_ZN8SPIClass5beginEv>
  SPI.setBitOrder(LSBFIRST);
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_ZN8SPIClass11setBitOrderEh>
  SPI.setClockDivider(a_pins->spi_clock_divider);
     b2c:	8e 81       	ldd	r24, Y+6	; 0x06
     b2e:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN8SPIClass15setClockDividerEh>
  SPI.setDataMode(SPI_MODE0);
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN8SPIClass11setDataModeEh>


  
  /* initialize aci cmd queue */
  m_aci_q_init(&aci_tx_q);  
     b38:	8a e2       	ldi	r24, 0x2A	; 42
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 9c 03 	call	0x738	; 0x738 <_ZL12m_aci_q_initP11aci_queue_t>
  m_aci_q_init(&aci_rx_q);
     b40:	84 ea       	ldi	r24, 0xA4	; 164
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 9c 03 	call	0x738	; 0x738 <_ZL12m_aci_q_initP11aci_queue_t>

  //Configure the IO lines
  pinMode(a_pins->rdyn_pin,		INPUT_PULLUP);
     b48:	62 e0       	ldi	r22, 0x02	; 2
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	0e 94 39 0c 	call	0x1872	; 0x1872 <pinMode>
  pinMode(a_pins->reqn_pin,		OUTPUT);
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	0e 94 39 0c 	call	0x1872	; 0x1872 <pinMode>

  if (UNUSED != a_pins->active_pin)
     b58:	88 85       	ldd	r24, Y+8	; 0x08
     b5a:	8f 3f       	cpi	r24, 0xFF	; 255
     b5c:	19 f0       	breq	.+6      	; 0xb64 <_Z15hal_aci_tl_initP10aci_pins_t+0x50>
  {
	pinMode(a_pins->active_pin,	INPUT);  
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	0e 94 39 0c 	call	0x1872	; 0x1872 <pinMode>
  }
  

  if (UNUSED != a_pins->reset_pin)
     b64:	8f 81       	ldd	r24, Y+7	; 0x07
     b66:	8f 3f       	cpi	r24, 0xFF	; 255
     b68:	09 f1       	breq	.+66     	; 0xbac <_Z15hal_aci_tl_initP10aci_pins_t+0x98>
  {
	pinMode(a_pins->reset_pin,	OUTPUT);
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	0e 94 39 0c 	call	0x1872	; 0x1872 <pinMode>
	
	if (REDBEARLAB_SHIELD_V1_1 == a_pins->board_name)
     b70:	88 81       	ld	r24, Y
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	79 f4       	brne	.+30     	; 0xb94 <_Z15hal_aci_tl_initP10aci_pins_t+0x80>
	{
		//The reset for this board is inverted and has a Power On Reset
		//circuit that takes about 100ms to trigger the reset
		digitalWrite(a_pins->reset_pin, 1);
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	8f 81       	ldd	r24, Y+7	; 0x07
     b7a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
		delay(100);
     b7e:	64 e6       	ldi	r22, 0x64	; 100
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 a5 0b 	call	0x174a	; 0x174a <delay>
		digitalWrite(a_pins->reset_pin, 0);		
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	8f 81       	ldd	r24, Y+7	; 0x07
     b8e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
     b92:	0c c0       	rjmp	.+24     	; 0xbac <_Z15hal_aci_tl_initP10aci_pins_t+0x98>
	}
	else
	{
		digitalWrite(a_pins->reset_pin, 1);
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	8f 81       	ldd	r24, Y+7	; 0x07
     b98:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
		digitalWrite(a_pins->reset_pin, 0);		
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ba0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
		digitalWrite(a_pins->reset_pin, 1);
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	8f 81       	ldd	r24, Y+7	; 0x07
     ba8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
	}
	
  }
  
  
  digitalWrite(a_pins->miso_pin, 0);
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
  digitalWrite(a_pins->mosi_pin, 0);
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
  digitalWrite(a_pins->reqn_pin, 1);
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
  digitalWrite(a_pins->sck_pin,  0);  
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	8d 81       	ldd	r24, Y+5	; 0x05
     bc8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
  
  delay(30); //Wait for the nRF8001 to get hold of its lines - the lines float for a few ms after the reset
     bcc:	6e e1       	ldi	r22, 0x1E	; 30
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 a5 0b 	call	0x174a	; 0x174a <delay>
  
  //Attach the interrupt to the RDYN line as requested by the caller
  if (a_pins->interface_is_interrupt)
     bd8:	8a 85       	ldd	r24, Y+10	; 0x0a
     bda:	88 23       	and	r24, r24
     bdc:	39 f0       	breq	.+14     	; 0xbec <_Z15hal_aci_tl_initP10aci_pins_t+0xd8>
  {
	attachInterrupt(a_pins->interrupt_number, m_rdy_line_handle, LOW); // We use the LOW level of the RDYN line as the atmega328 can wakeup from sleep only on LOW  
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	63 e6       	ldi	r22, 0x63	; 99
     be4:	75 e0       	ldi	r23, 0x05	; 5
     be6:	8b 85       	ldd	r24, Y+11	; 0x0b
     be8:	0e 94 cd 0a 	call	0x159a	; 0x159a <attachInterrupt>
  }
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <_Z25lib_aci_is_pipe_availableP11aci_state_th>:

bool lib_aci_is_pipe_available(aci_state_t *aci_stat, uint8_t pipe)
{
  uint8_t byte_idx;

  byte_idx = pipe / 8;
     bf2:	26 2f       	mov	r18, r22
     bf4:	26 95       	lsr	r18
     bf6:	26 95       	lsr	r18
     bf8:	26 95       	lsr	r18
  if (aci_stat->pipes_open_bitmap[byte_idx] & (0x01 << (pipe % 8)))
     bfa:	fc 01       	movw	r30, r24
     bfc:	e2 0f       	add	r30, r18
     bfe:	f1 1d       	adc	r31, r1
     c00:	24 8d       	ldd	r18, Z+28	; 0x1c
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	67 70       	andi	r22, 0x07	; 7
     c06:	c9 01       	movw	r24, r18
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <_Z25lib_aci_is_pipe_availableP11aci_state_th+0x1c>
     c0a:	95 95       	asr	r25
     c0c:	87 95       	ror	r24
     c0e:	6a 95       	dec	r22
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <_Z25lib_aci_is_pipe_availableP11aci_state_th+0x18>
  {
    return(true);
  }
  return(false);
}
     c12:	81 70       	andi	r24, 0x01	; 1
     c14:	08 95       	ret

00000c16 <_Z19lib_aci_radio_resetv>:
}


bool lib_aci_radio_reset()
{
  acil_encode_baseband_reset(&(msg_to_send.buffer[0]));
     c16:	85 ed       	ldi	r24, 0xD5	; 213
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_Z26acil_encode_baseband_resetPh>
  return hal_aci_tl_send(&msg_to_send);
     c1e:	84 ed       	ldi	r24, 0xD4	; 212
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z15hal_aci_tl_sendP14hal_aci_data_t>
}
     c26:	08 95       	ret

00000c28 <_Z22lib_aci_device_versionv>:
}


bool lib_aci_device_version()
{
  acil_encode_cmd_get_device_version(&(msg_to_send.buffer[0]));
     c28:	85 ed       	ldi	r24, 0xD5	; 213
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 b1 02 	call	0x562	; 0x562 <_Z34acil_encode_cmd_get_device_versionPh>
  return hal_aci_tl_send(&msg_to_send);
     c30:	84 ed       	ldi	r24, 0xD4	; 212
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z15hal_aci_tl_sendP14hal_aci_data_t>
}
     c38:	08 95       	ret

00000c3a <_Z22lib_aci_set_local_dataP11aci_state_thPhh>:


bool lib_aci_set_local_data(aci_state_t *aci_stat, uint8_t pipe, uint8_t *p_value, uint8_t size)
{
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	65 97       	sbiw	r28, 0x15	; 21
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	34 2f       	mov	r19, r20
     c52:	75 2f       	mov	r23, r21
     c54:	12 2f       	mov	r17, r18
  aci_cmd_params_set_local_data_t aci_cmd_params_set_local_data;
  
  if ((p_services_pipe_type_map[pipe-1].location != ACI_STORE_LOCAL)
     c56:	86 2f       	mov	r24, r22
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	fc 01       	movw	r30, r24
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	8e 0f       	add	r24, r30
     c64:	9f 1f       	adc	r25, r31
     c66:	e0 91 03 03 	lds	r30, 0x0303
     c6a:	f0 91 04 03 	lds	r31, 0x0304
     c6e:	e8 0f       	add	r30, r24
     c70:	f9 1f       	adc	r31, r25
     c72:	80 81       	ld	r24, Z
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	c9 f4       	brne	.+50     	; 0xcaa <_Z22lib_aci_set_local_dataP11aci_state_thPhh+0x70>
     c78:	25 31       	cpi	r18, 0x15	; 21
     c7a:	c8 f4       	brcc	.+50     	; 0xcae <_Z22lib_aci_set_local_dataP11aci_state_thPhh+0x74>
      (size > ACI_PIPE_TX_DATA_MAX_LEN))
  {
    return false;
  }

  aci_cmd_params_set_local_data.tx_data.pipe_number = pipe;
     c7c:	69 83       	std	Y+1, r22	; 0x01
  memcpy(&(aci_cmd_params_set_local_data.tx_data.aci_data[0]), p_value, size);
     c7e:	fe 01       	movw	r30, r28
     c80:	32 96       	adiw	r30, 0x02	; 2
     c82:	42 2f       	mov	r20, r18
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	63 2f       	mov	r22, r19
     c88:	8e 2f       	mov	r24, r30
     c8a:	9f 2f       	mov	r25, r31
     c8c:	0e 94 40 11 	call	0x2280	; 0x2280 <memcpy>
  acil_encode_cmd_set_local_data(&(msg_to_send.buffer[0]), &aci_cmd_params_set_local_data, size);
     c90:	41 2f       	mov	r20, r17
     c92:	be 01       	movw	r22, r28
     c94:	6f 5f       	subi	r22, 0xFF	; 255
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	85 ed       	ldi	r24, 0xD5	; 213
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	0e 94 b7 02 	call	0x56e	; 0x56e <_Z30acil_encode_cmd_set_local_dataPhP31aci_cmd_params_set_local_data_th>
  return hal_aci_tl_send(&msg_to_send);
     ca0:	84 ed       	ldi	r24, 0xD4	; 212
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z15hal_aci_tl_sendP14hal_aci_data_t>
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <_Z22lib_aci_set_local_dataP11aci_state_thPhh+0x76>
  
  if ((p_services_pipe_type_map[pipe-1].location != ACI_STORE_LOCAL)
      ||
      (size > ACI_PIPE_TX_DATA_MAX_LEN))
  {
    return false;
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <_Z22lib_aci_set_local_dataP11aci_state_thPhh+0x76>
     cae:	80 e0       	ldi	r24, 0x00	; 0

  aci_cmd_params_set_local_data.tx_data.pipe_number = pipe;
  memcpy(&(aci_cmd_params_set_local_data.tx_data.aci_data[0]), p_value, size);
  acil_encode_cmd_set_local_data(&(msg_to_send.buffer[0]), &aci_cmd_params_set_local_data, size);
  return hal_aci_tl_send(&msg_to_send);
}
     cb0:	65 96       	adiw	r28, 0x15	; 21
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	08 95       	ret

00000cc4 <_Z15lib_aci_connectjj>:

bool lib_aci_connect(uint16_t run_timeout, uint16_t adv_interval)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	00 d0       	rcall	.+0      	; 0xcca <_Z15lib_aci_connectjj+0x6>
     cca:	00 d0       	rcall	.+0      	; 0xccc <_Z15lib_aci_connectjj+0x8>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
  aci_cmd_params_connect_t aci_cmd_params_connect;
  aci_cmd_params_connect.timeout      = run_timeout;
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
  aci_cmd_params_connect.adv_interval = adv_interval;
     cd4:	7c 83       	std	Y+4, r23	; 0x04
     cd6:	6b 83       	std	Y+3, r22	; 0x03
  acil_encode_cmd_connect(&(msg_to_send.buffer[0]), &aci_cmd_params_connect);
     cd8:	be 01       	movw	r22, r28
     cda:	6f 5f       	subi	r22, 0xFF	; 255
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	85 ed       	ldi	r24, 0xD5	; 213
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z23acil_encode_cmd_connectPhP24aci_cmd_params_connect_t>
  return hal_aci_tl_send(&msg_to_send);
     ce6:	84 ed       	ldi	r24, 0xD4	; 212
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z15hal_aci_tl_sendP14hal_aci_data_t>
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <_Z17lib_aci_send_datahPhh>:
  return hal_aci_tl_send(&msg_to_send);
}


bool lib_aci_send_data(uint8_t pipe, uint8_t *p_value, uint8_t size)
{
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	65 97       	sbiw	r28, 0x15	; 21
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	14 2f       	mov	r17, r20
  bool ret_val = false;
  aci_cmd_params_send_data_t aci_cmd_params_send_data;

  
  if(!((p_services_pipe_type_map[pipe-1].pipe_type == ACI_TX) ||
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	21 50       	subi	r18, 0x01	; 1
     d1a:	31 09       	sbc	r19, r1
     d1c:	f9 01       	movw	r30, r18
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	2e 0f       	add	r18, r30
     d24:	3f 1f       	adc	r19, r31
     d26:	e0 91 03 03 	lds	r30, 0x0303
     d2a:	f0 91 04 03 	lds	r31, 0x0304
     d2e:	e2 0f       	add	r30, r18
     d30:	f3 1f       	adc	r31, r19
      (p_services_pipe_type_map[pipe-1].pipe_type == ACI_TX_ACK)))
     d32:	21 81       	ldd	r18, Z+1	; 0x01
     d34:	32 81       	ldd	r19, Z+2	; 0x02
{
  bool ret_val = false;
  aci_cmd_params_send_data_t aci_cmd_params_send_data;

  
  if(!((p_services_pipe_type_map[pipe-1].pipe_type == ACI_TX) ||
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	19 f0       	breq	.+6      	; 0xd42 <_Z17lib_aci_send_datahPhh+0x46>
      (p_services_pipe_type_map[pipe-1].pipe_type == ACI_TX_ACK)))
     d3c:	24 30       	cpi	r18, 0x04	; 4
     d3e:	31 05       	cpc	r19, r1
     d40:	c9 f4       	brne	.+50     	; 0xd74 <_Z17lib_aci_send_datahPhh+0x78>
  {
    return false;
  }

  if (size > ACI_PIPE_TX_DATA_MAX_LEN)
     d42:	15 31       	cpi	r17, 0x15	; 21
     d44:	c8 f4       	brcc	.+50     	; 0xd78 <_Z17lib_aci_send_datahPhh+0x7c>
  {
    return false;
  }
  {
      aci_cmd_params_send_data.tx_data.pipe_number = pipe;
     d46:	89 83       	std	Y+1, r24	; 0x01
      memcpy(&(aci_cmd_params_send_data.tx_data.aci_data[0]), p_value, size);
     d48:	9e 01       	movw	r18, r28
     d4a:	2e 5f       	subi	r18, 0xFE	; 254
     d4c:	3f 4f       	sbci	r19, 0xFF	; 255
     d4e:	41 2f       	mov	r20, r17
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	82 2f       	mov	r24, r18
     d54:	93 2f       	mov	r25, r19
     d56:	0e 94 40 11 	call	0x2280	; 0x2280 <memcpy>
      acil_encode_cmd_send_data(&(msg_to_send.buffer[0]), &aci_cmd_params_send_data, size);
     d5a:	41 2f       	mov	r20, r17
     d5c:	be 01       	movw	r22, r28
     d5e:	6f 5f       	subi	r22, 0xFF	; 255
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	85 ed       	ldi	r24, 0xD5	; 213
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_Z25acil_encode_cmd_send_dataPhP26aci_cmd_params_send_data_th>
      
      ret_val = hal_aci_tl_send(&msg_to_send);          
     d6a:	84 ed       	ldi	r24, 0xD4	; 212
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z15hal_aci_tl_sendP14hal_aci_data_t>
     d72:	03 c0       	rjmp	.+6      	; 0xd7a <_Z17lib_aci_send_datahPhh+0x7e>

  
  if(!((p_services_pipe_type_map[pipe-1].pipe_type == ACI_TX) ||
      (p_services_pipe_type_map[pipe-1].pipe_type == ACI_TX_ACK)))
  {
    return false;
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <_Z17lib_aci_send_datahPhh+0x7e>
  }

  if (size > ACI_PIPE_TX_DATA_MAX_LEN)
  {
    return false;
     d78:	80 e0       	ldi	r24, 0x00	; 0
      acil_encode_cmd_send_data(&(msg_to_send.buffer[0]), &aci_cmd_params_send_data, size);
      
      ret_val = hal_aci_tl_send(&msg_to_send);          
  }
  return ret_val;
}
     d7a:	65 96       	adiw	r28, 0x15	; 21
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	08 95       	ret

00000d8e <_Z30lib_aci_change_timing_GAP_PPCPv>:
}


bool lib_aci_change_timing_GAP_PPCP()
{
  acil_encode_cmd_change_timing_req_GAP_PPCP(&(msg_to_send.buffer[0]));
     d8e:	85 ed       	ldi	r24, 0xD5	; 213
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_Z42acil_encode_cmd_change_timing_req_GAP_PPCPPh>
  return hal_aci_tl_send(&msg_to_send);
     d96:	84 ed       	ldi	r24, 0xD4	; 212
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z15hal_aci_tl_sendP14hal_aci_data_t>
}
     d9e:	08 95       	ret

00000da0 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t>:
  acil_encode_cmd_bond_security_request(&(msg_to_send.buffer[0]));
  return hal_aci_tl_send(&msg_to_send);
}

bool lib_aci_event_get(aci_state_t *aci_stat, hal_aci_evt_t *p_aci_evt_data)
{
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	ec 01       	movw	r28, r24
     daa:	8b 01       	movw	r16, r22
  bool status = false;
  
  if (false == aci_stat->aci_pins.interface_is_interrupt)
     dac:	8a 85       	ldd	r24, Y+10	; 0x0a
     dae:	81 11       	cpse	r24, r1
     db0:	18 c0       	rjmp	.+48     	; 0xde2 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0x42>
  

	  /*
	  When the RDYN goes low it means the nRF8001 is ready for the SPI transaction
	  */
	  if (0 != digitalRead(aci_stat->aci_pins.rdyn_pin))
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	0e 94 cc 0c 	call	0x1998	; 0x1998 <digitalRead>
     db8:	89 2b       	or	r24, r25
     dba:	89 f0       	breq	.+34     	; 0xdde <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0x3e>
	  {
		/* RDYN line was not low */
		/*when there are commands in the Command queue. place the REQN line low, so the RDYN line will go low later*/
		if ((false == m_aci_q_is_empty(&aci_tx_q)) && 
     dbc:	8a e2       	ldi	r24, 0x2A	; 42
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z16m_aci_q_is_emptyP11aci_queue_t>
     dc4:	81 11       	cpse	r24, r1
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0x42>
			(false == m_aci_q_is_full(&aci_rx_q)))
     dc8:	84 ea       	ldi	r24, 0xA4	; 164
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_Z15m_aci_q_is_fullP11aci_queue_t>
	  */
	  if (0 != digitalRead(aci_stat->aci_pins.rdyn_pin))
	  {
		/* RDYN line was not low */
		/*when there are commands in the Command queue. place the REQN line low, so the RDYN line will go low later*/
		if ((false == m_aci_q_is_empty(&aci_tx_q)) && 
     dd0:	81 11       	cpse	r24, r1
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0x42>
			(false == m_aci_q_is_full(&aci_rx_q)))
		{    
			digitalWrite(aci_stat->aci_pins.reqn_pin, 0); 
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0x42>
	  else
	  {
		/*
		Now process the Master SPI
		*/
		m_rdy_line_handle();  
     dde:	0e 94 63 05 	call	0xac6	; 0xac6 <_Z17m_rdy_line_handlev>
	  }
  }
  status = hal_aci_tl_event_get((hal_aci_data_t *)p_aci_evt_data);
     de2:	c8 01       	movw	r24, r16
     de4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_Z20hal_aci_tl_event_getP14hal_aci_data_t>
  
  /**
  Update the state of the ACI witn the 
  ACI Events -> Pipe Status, Disconnected, Connected, Bond Status, Pipe Error
  */
  if (true == status)
     de8:	88 23       	and	r24, r24
     dea:	c1 f1       	breq	.+112    	; 0xe5c <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0xbc>
  {
    aci_evt_t * aci_evt;
    
    aci_evt = &p_aci_evt_data->evt;  
    
    switch(aci_evt->evt_opcode)
     dec:	f8 01       	movw	r30, r16
     dee:	92 81       	ldd	r25, Z+2	; 0x02
     df0:	98 38       	cpi	r25, 0x88	; 136
     df2:	29 f0       	breq	.+10     	; 0xdfe <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0x5e>
     df4:	99 38       	cpi	r25, 0x89	; 137
     df6:	29 f1       	breq	.+74     	; 0xe42 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0xa2>
     df8:	96 38       	cpi	r25, 0x86	; 134
     dfa:	81 f5       	brne	.+96     	; 0xe5c <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0xbc>
     dfc:	14 c0       	rjmp	.+40     	; 0xe26 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0x86>
{
  acil_encode_cmd_bond_security_request(&(msg_to_send.buffer[0]));
  return hal_aci_tl_send(&msg_to_send);
}

bool lib_aci_event_get(aci_state_t *aci_stat, hal_aci_evt_t *p_aci_evt_data)
     dfe:	98 01       	movw	r18, r16
     e00:	2d 5f       	subi	r18, 0xFD	; 253
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	de 01       	movw	r26, r28
     e06:	5c 96       	adiw	r26, 0x1c	; 28
     e08:	05 5f       	subi	r16, 0xF5	; 245
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	a4 96       	adiw	r28, 0x24	; 36
     e0e:	98 e0       	ldi	r25, 0x08	; 8
            {
                uint8_t i=0;
                
                for (i=0; i < PIPES_ARRAY_SIZE; i++)
                {
                  aci_stat->pipes_open_bitmap[i]   = aci_evt->params.pipe_status.pipes_open_bitmap[i];
     e10:	f9 01       	movw	r30, r18
     e12:	41 91       	ld	r20, Z+
     e14:	9f 01       	movw	r18, r30
     e16:	4d 93       	st	X+, r20
                  aci_stat->pipes_closed_bitmap[i] = aci_evt->params.pipe_status.pipes_closed_bitmap[i];
     e18:	f8 01       	movw	r30, r16
     e1a:	41 91       	ld	r20, Z+
     e1c:	8f 01       	movw	r16, r30
     e1e:	49 93       	st	Y+, r20
     e20:	91 50       	subi	r25, 0x01	; 1
    {
        case ACI_EVT_PIPE_STATUS:
            {
                uint8_t i=0;
                
                for (i=0; i < PIPES_ARRAY_SIZE; i++)
     e22:	b1 f7       	brne	.-20     	; 0xe10 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0x70>
     e24:	1b c0       	rjmp	.+54     	; 0xe5c <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0xbc>
{
  acil_encode_cmd_bond_security_request(&(msg_to_send.buffer[0]));
  return hal_aci_tl_send(&msg_to_send);
}

bool lib_aci_event_get(aci_state_t *aci_stat, hal_aci_evt_t *p_aci_evt_data)
     e26:	de 01       	movw	r26, r28
     e28:	5c 96       	adiw	r26, 0x1c	; 28
     e2a:	fe 01       	movw	r30, r28
     e2c:	b4 96       	adiw	r30, 0x24	; 36
     e2e:	90 e0       	ldi	r25, 0x00	; 0
            {
                uint8_t i=0;
                
                for (i=0; i < PIPES_ARRAY_SIZE; i++)
                {
                  aci_stat->pipes_open_bitmap[i] = 0;
     e30:	1d 92       	st	X+, r1
                  aci_stat->pipes_closed_bitmap[i] = 0;
     e32:	11 92       	st	Z+, r1
        
        case ACI_EVT_DISCONNECTED:
            {
                uint8_t i=0;
                
                for (i=0; i < PIPES_ARRAY_SIZE; i++)
     e34:	9f 5f       	subi	r25, 0xFF	; 255
     e36:	98 30       	cpi	r25, 0x08	; 8
     e38:	d9 f7       	brne	.-10     	; 0xe30 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0x90>
                {
                  aci_stat->pipes_open_bitmap[i] = 0;
                  aci_stat->pipes_closed_bitmap[i] = 0;
                }
                aci_stat->confirmation_pending = false;
     e3a:	1c a6       	std	Y+44, r1	; 0x2c
                aci_stat->data_credit_available = aci_stat->data_credit_total;
     e3c:	9b 89       	ldd	r25, Y+19	; 0x13
     e3e:	9d 8b       	std	Y+21, r25	; 0x15
                
            }
            break;
     e40:	0d c0       	rjmp	.+26     	; 0xe5c <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t+0xbc>
            
        case ACI_EVT_TIMING:            
                aci_stat->connection_interval = aci_evt->params.timing.conn_rf_interval;
     e42:	f8 01       	movw	r30, r16
     e44:	23 81       	ldd	r18, Z+3	; 0x03
     e46:	34 81       	ldd	r19, Z+4	; 0x04
     e48:	3f 8b       	std	Y+23, r19	; 0x17
     e4a:	2e 8b       	std	Y+22, r18	; 0x16
                aci_stat->slave_latency       = aci_evt->params.timing.conn_slave_rf_latency;
     e4c:	25 81       	ldd	r18, Z+5	; 0x05
     e4e:	36 81       	ldd	r19, Z+6	; 0x06
     e50:	39 8f       	std	Y+25, r19	; 0x19
     e52:	28 8f       	std	Y+24, r18	; 0x18
                aci_stat->supervision_timeout = aci_evt->params.timing.conn_rf_timeout;
     e54:	27 81       	ldd	r18, Z+7	; 0x07
     e56:	30 85       	ldd	r19, Z+8	; 0x08
     e58:	3b 8f       	std	Y+27, r19	; 0x1b
     e5a:	2a 8f       	std	Y+26, r18	; 0x1a
    }
    
  }
  
  return status;
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <_Z18lib_aci_board_initP11aci_state_t>:
  return(aci_stat->pipes_open_bitmap[0]&0x01);
}


void lib_aci_board_init(aci_state_t *aci_stat)
{
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
	hal_aci_evt_t *aci_data = NULL;
	aci_data = (hal_aci_evt_t *)&msg_to_send;
					
	if (REDBEARLAB_SHIELD_V1_1 == aci_stat->aci_pins.board_name)
     e70:	88 81       	ld	r24, Y
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	09 f0       	breq	.+2      	; 0xe78 <_Z18lib_aci_board_initP11aci_state_t+0x12>
     e76:	59 c0       	rjmp	.+178    	; 0xf2a <_Z18lib_aci_board_initP11aci_state_t+0xc4>
	{
	  /*
	  The Bluetooth low energy Arduino shield v1.1 requires about 100ms to reset.
	  This is not required for the nRF2740, nRF2741 modules
	  */
	  delay(100);
     e78:	64 e6       	ldi	r22, 0x64	; 100
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 a5 0b 	call	0x174a	; 0x174a <delay>
  
	  /*
	  Send the soft reset command to the nRF8001 to get the nRF8001 to a known state.
	  */
	  lib_aci_radio_reset();
     e84:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z19lib_aci_radio_resetv>
		if (true == lib_aci_event_get(aci_stat, aci_data))
		{
		  aci_evt_t * aci_evt;      
		  aci_evt = &(aci_data->evt);
	  
		  if (ACI_EVT_CMD_RSP == aci_evt->evt_opcode)
     e88:	06 ed       	ldi	r16, 0xD6	; 214
     e8a:	12 e0       	ldi	r17, 0x02	; 2
		/*Wait for the command response of the radio reset command.
		as the nRF8001 will be in either SETUP or STANDBY after the ACI Reset Radio is processed
		*/

			
		if (true == lib_aci_event_get(aci_stat, aci_data))
     e8c:	64 ed       	ldi	r22, 0xD4	; 212
     e8e:	72 e0       	ldi	r23, 0x02	; 2
     e90:	ce 01       	movw	r24, r28
     e92:	0e 94 d0 06 	call	0xda0	; 0xda0 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t>
     e96:	88 23       	and	r24, r24
     e98:	c9 f3       	breq	.-14     	; 0xe8c <_Z18lib_aci_board_initP11aci_state_t+0x26>
		{
		  aci_evt_t * aci_evt;      
		  aci_evt = &(aci_data->evt);
	  
		  if (ACI_EVT_CMD_RSP == aci_evt->evt_opcode)
     e9a:	f8 01       	movw	r30, r16
     e9c:	80 81       	ld	r24, Z
     e9e:	84 38       	cpi	r24, 0x84	; 132
     ea0:	a9 f7       	brne	.-22     	; 0xe8c <_Z18lib_aci_board_initP11aci_state_t+0x26>
		  {
				if (ACI_STATUS_ERROR_DEVICE_STATE_INVALID == aci_evt->params.cmd_rsp.cmd_status) //in SETUP
     ea2:	80 91 d8 02 	lds	r24, 0x02D8
     ea6:	83 38       	cpi	r24, 0x83	; 131
     ea8:	a1 f4       	brne	.+40     	; 0xed2 <_Z18lib_aci_board_initP11aci_state_t+0x6c>
				{
					//Inject a Device Started Event Setup to the ACI Event Queue
					msg_to_send.buffer[0] = 4;    //Length
     eaa:	84 e0       	ldi	r24, 0x04	; 4
     eac:	80 93 d5 02 	sts	0x02D5, r24
					msg_to_send.buffer[1] = 0x81; //Device Started Event
     eb0:	81 e8       	ldi	r24, 0x81	; 129
     eb2:	80 93 d6 02 	sts	0x02D6, r24
					msg_to_send.buffer[2] = 0x02; //Setup
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	80 93 d7 02 	sts	0x02D7, r24
					msg_to_send.buffer[3] = 0;    //Hardware Error -> None
     ebc:	10 92 d8 02 	sts	0x02D8, r1
					msg_to_send.buffer[4] = 2;    //Data Credit Available
     ec0:	80 93 d9 02 	sts	0x02D9, r24
					m_aci_q_enqueue(&aci_rx_q, &msg_to_send);            
     ec4:	64 ed       	ldi	r22, 0xD4	; 212
     ec6:	72 e0       	ldi	r23, 0x02	; 2
     ec8:	84 ea       	ldi	r24, 0xA4	; 164
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	0e 94 19 04 	call	0x832	; 0x832 <_Z15m_aci_q_enqueueP11aci_queue_tP14hal_aci_data_t>
     ed0:	2c c0       	rjmp	.+88     	; 0xf2a <_Z18lib_aci_board_initP11aci_state_t+0xc4>
				}
				else if (ACI_STATUS_SUCCESS == aci_evt->params.cmd_rsp.cmd_status) //We are now in STANDBY
     ed2:	81 11       	cpse	r24, r1
     ed4:	15 c0       	rjmp	.+42     	; 0xf00 <_Z18lib_aci_board_initP11aci_state_t+0x9a>
				{
					//Inject a Device Started Event Standby to the ACI Event Queue
					msg_to_send.buffer[0] = 4;    //Length
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	80 93 d5 02 	sts	0x02D5, r24
					msg_to_send.buffer[1] = 0x81; //Device Started Event
     edc:	81 e8       	ldi	r24, 0x81	; 129
     ede:	80 93 d6 02 	sts	0x02D6, r24
					msg_to_send.buffer[2] = 0x03; //Standby
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	80 93 d7 02 	sts	0x02D7, r24
					msg_to_send.buffer[3] = 0;    //Hardware Error -> None
     ee8:	10 92 d8 02 	sts	0x02D8, r1
					msg_to_send.buffer[4] = 2;    //Data Credit Available
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	80 93 d9 02 	sts	0x02D9, r24
					m_aci_q_enqueue(&aci_rx_q, &msg_to_send);            
     ef2:	64 ed       	ldi	r22, 0xD4	; 212
     ef4:	72 e0       	ldi	r23, 0x02	; 2
     ef6:	84 ea       	ldi	r24, 0xA4	; 164
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 19 04 	call	0x832	; 0x832 <_Z15m_aci_q_enqueueP11aci_queue_tP14hal_aci_data_t>
     efe:	15 c0       	rjmp	.+42     	; 0xf2a <_Z18lib_aci_board_initP11aci_state_t+0xc4>
				}
				else if (ACI_STATUS_ERROR_CMD_UNKNOWN == aci_evt->params.cmd_rsp.cmd_status) //We are now in TEST
     f00:	82 38       	cpi	r24, 0x82	; 130
     f02:	99 f4       	brne	.+38     	; 0xf2a <_Z18lib_aci_board_initP11aci_state_t+0xc4>
				{
					//Inject a Device Started Event Standby to the ACI Event Queue
					msg_to_send.buffer[0] = 4;    //Length
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	80 93 d5 02 	sts	0x02D5, r24
					msg_to_send.buffer[1] = 0x81; //Device Started Event
     f0a:	81 e8       	ldi	r24, 0x81	; 129
     f0c:	80 93 d6 02 	sts	0x02D6, r24
					msg_to_send.buffer[2] = 0x01; //Test
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 d7 02 	sts	0x02D7, r24
					msg_to_send.buffer[3] = 0;    //Hardware Error -> None
     f16:	10 92 d8 02 	sts	0x02D8, r1
					msg_to_send.buffer[4] = 0;    //Data Credit Available
     f1a:	10 92 d9 02 	sts	0x02D9, r1
					m_aci_q_enqueue(&aci_rx_q, &msg_to_send);
     f1e:	64 ed       	ldi	r22, 0xD4	; 212
     f20:	72 e0       	ldi	r23, 0x02	; 2
     f22:	84 ea       	ldi	r24, 0xA4	; 164
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	0e 94 19 04 	call	0x832	; 0x832 <_Z15m_aci_q_enqueueP11aci_queue_tP14hal_aci_data_t>
		  }
	  
		}
	  }		
	}
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	08 95       	ret

00000f34 <_Z12lib_aci_initP11aci_state_t>:


void lib_aci_init(aci_state_t *aci_stat)
{
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	8c 01       	movw	r16, r24
	  }		
	}
}


void lib_aci_init(aci_state_t *aci_stat)
     f3e:	ec 01       	movw	r28, r24
     f40:	6c 96       	adiw	r28, 0x1c	; 28
     f42:	dc 01       	movw	r26, r24
     f44:	94 96       	adiw	r26, 0x24	; 36
     f46:	e5 ef       	ldi	r30, 0xF5	; 245
     f48:	f2 e0       	ldi	r31, 0x02	; 2
     f4a:	2d ef       	ldi	r18, 0xFD	; 253
     f4c:	32 e0       	ldi	r19, 0x02	; 2
{
  uint8_t i;

  for (i = 0; i < PIPES_ARRAY_SIZE; i++)
  {
    aci_stat->pipes_open_bitmap[i]          = 0;
     f4e:	19 92       	st	Y+, r1
    aci_stat->pipes_closed_bitmap[i]        = 0;
     f50:	1d 92       	st	X+, r1
    aci_cmd_params_open_adv_pipe.pipes[i]   = 0;
     f52:	11 92       	st	Z+, r1

void lib_aci_init(aci_state_t *aci_stat)
{
  uint8_t i;

  for (i = 0; i < PIPES_ARRAY_SIZE; i++)
     f54:	e2 17       	cp	r30, r18
     f56:	f3 07       	cpc	r31, r19
     f58:	d1 f7       	brne	.-12     	; 0xf4e <_Z12lib_aci_initP11aci_state_t+0x1a>
  }
  



  is_request_operation_pending     = false;
     f5a:	10 92 fd 02 	sts	0x02FD, r1
  is_indicate_operation_pending    = false; 
     f5e:	10 92 fe 02 	sts	0x02FE, r1
  is_open_remote_pipe_pending      = false;
     f62:	10 92 ff 02 	sts	0x02FF, r1
  is_close_remote_pipe_pending     = false;
     f66:	10 92 00 03 	sts	0x0300, r1



  
  
  request_operation_pipe           = 0;
     f6a:	10 92 01 03 	sts	0x0301, r1
  indicate_operation_pipe          = 0;
     f6e:	10 92 02 03 	sts	0x0302, r1
  
  
  
  p_services_pipe_type_map = aci_stat->aci_setup_info.services_pipe_type_mapping;
     f72:	f8 01       	movw	r30, r16
     f74:	84 85       	ldd	r24, Z+12	; 0x0c
     f76:	95 85       	ldd	r25, Z+13	; 0x0d
     f78:	90 93 04 03 	sts	0x0304, r25
     f7c:	80 93 03 03 	sts	0x0303, r24
  
  p_setup_msgs             = aci_stat->aci_setup_info.setup_msgs;
     f80:	87 85       	ldd	r24, Z+15	; 0x0f
     f82:	90 89       	ldd	r25, Z+16	; 0x10
     f84:	90 93 06 03 	sts	0x0306, r25
     f88:	80 93 05 03 	sts	0x0305, r24
  
  
  hal_aci_tl_init(&aci_stat->aci_pins);
     f8c:	c8 01       	movw	r24, r16
     f8e:	0e 94 8a 05 	call	0xb14	; 0xb14 <_Z15hal_aci_tl_initP10aci_pins_t>
  
  lib_aci_board_init(aci_stat);
     f92:	c8 01       	movw	r24, r16
     f94:	0e 94 33 07 	call	0xe66	; 0xe66 <_Z18lib_aci_board_initP11aci_state_t>
}
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	08 95       	ret

00000fa2 <_Z19lib_aci_debug_printb>:
  m_aci_q_flush();
}

void lib_aci_debug_print(bool enable)
{
  hal_aci_debug_print(enable);
     fa2:	0e 94 16 04 	call	0x82c	; 0x82c <_Z19hal_aci_debug_printb>
     fa6:	08 95       	ret

00000fa8 <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	8a e0       	ldi	r24, 0x0A	; 10
     fac:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <digitalWrite>

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	8a e0       	ldi	r24, 0x0A	; 10
     fb4:	0e 94 39 0c 	call	0x1872	; 0x1872 <pinMode>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
     fb8:	8c b5       	in	r24, 0x2c	; 44
     fba:	80 61       	ori	r24, 0x10	; 16
     fbc:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     fbe:	8c b5       	in	r24, 0x2c	; 44
     fc0:	80 64       	ori	r24, 0x40	; 64
     fc2:	8c bd       	out	0x2c, r24	; 44
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
#ifdef __AVR__
  pinMode(SCK, OUTPUT);
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	8d e0       	ldi	r24, 0x0D	; 13
     fc8:	0e 94 39 0c 	call	0x1872	; 0x1872 <pinMode>
  pinMode(MOSI, OUTPUT);
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	8b e0       	ldi	r24, 0x0B	; 11
     fd0:	0e 94 39 0c 	call	0x1872	; 0x1872 <pinMode>
     fd4:	08 95       	ret

00000fd6 <_ZN8SPIClass11setBitOrderEh>:
  SPCR &= ~_BV(SPE);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
     fd6:	81 11       	cpse	r24, r1
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <_ZN8SPIClass11setBitOrderEh+0xc>
    SPCR |= _BV(DORD);
     fda:	8c b5       	in	r24, 0x2c	; 44
     fdc:	80 62       	ori	r24, 0x20	; 32
     fde:	8c bd       	out	0x2c, r24	; 44
     fe0:	08 95       	ret
  } else {
    SPCR &= ~(_BV(DORD));
     fe2:	8c b5       	in	r24, 0x2c	; 44
     fe4:	8f 7d       	andi	r24, 0xDF	; 223
     fe6:	8c bd       	out	0x2c, r24	; 44
     fe8:	08 95       	ret

00000fea <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
     fea:	9c b5       	in	r25, 0x2c	; 44
     fec:	93 7f       	andi	r25, 0xF3	; 243
     fee:	89 2b       	or	r24, r25
     ff0:	8c bd       	out	0x2c, r24	; 44
     ff2:	08 95       	ret

00000ff4 <_ZN8SPIClass15setClockDividerEh>:
}

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
     ff4:	9c b5       	in	r25, 0x2c	; 44
     ff6:	28 2f       	mov	r18, r24
     ff8:	23 70       	andi	r18, 0x03	; 3
     ffa:	9c 7f       	andi	r25, 0xFC	; 252
     ffc:	92 2b       	or	r25, r18
     ffe:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    1000:	2d b5       	in	r18, 0x2d	; 45
    1002:	82 fb       	bst	r24, 2
    1004:	99 27       	eor	r25, r25
    1006:	90 f9       	bld	r25, 0
    1008:	82 2f       	mov	r24, r18
    100a:	8e 7f       	andi	r24, 0xFE	; 254
    100c:	89 2b       	or	r24, r25
    100e:	8d bd       	out	0x2d, r24	; 45
    1010:	08 95       	ret

00001012 <_ZL14process_eventsv>:
{
    return is_connected;
}

static void process_events()
{
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
			// We enter the if statement only when there is a ACI event available to be processed
			if (lib_aci_event_get(&aci_state, &aci_data))
    1016:	69 eb       	ldi	r22, 0xB9	; 185
    1018:	73 e0       	ldi	r23, 0x03	; 3
    101a:	8b e4       	ldi	r24, 0x4B	; 75
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	0e 94 d0 06 	call	0xda0	; 0xda0 <_Z17lib_aci_event_getP11aci_state_tP13hal_aci_evt_t>
    1022:	88 23       	and	r24, r24
    1024:	09 f4       	brne	.+2      	; 0x1028 <_ZL14process_eventsv+0x16>
    1026:	52 c1       	rjmp	.+676    	; 0x12cc <_ZL14process_eventsv+0x2ba>
			{
				aci_evt_t  *aci_evt;   
				aci_evt = &aci_data.evt;    
				switch(aci_evt->evt_opcode)
    1028:	80 91 bb 03 	lds	r24, 0x03BB
    102c:	88 38       	cpi	r24, 0x88	; 136
    102e:	09 f4       	brne	.+2      	; 0x1032 <_ZL14process_eventsv+0x20>
    1030:	9b c0       	rjmp	.+310    	; 0x1168 <_ZL14process_eventsv+0x156>
    1032:	78 f4       	brcc	.+30     	; 0x1052 <_ZL14process_eventsv+0x40>
    1034:	84 38       	cpi	r24, 0x84	; 132
    1036:	09 f4       	brne	.+2      	; 0x103a <_ZL14process_eventsv+0x28>
    1038:	60 c0       	rjmp	.+192    	; 0x10fa <_ZL14process_eventsv+0xe8>
    103a:	20 f4       	brcc	.+8      	; 0x1044 <_ZL14process_eventsv+0x32>
    103c:	81 38       	cpi	r24, 0x81	; 129
    103e:	09 f0       	breq	.+2      	; 0x1042 <_ZL14process_eventsv+0x30>
    1040:	45 c1       	rjmp	.+650    	; 0x12cc <_ZL14process_eventsv+0x2ba>
    1042:	28 c0       	rjmp	.+80     	; 0x1094 <_ZL14process_eventsv+0x82>
    1044:	85 38       	cpi	r24, 0x85	; 133
    1046:	09 f4       	brne	.+2      	; 0x104a <_ZL14process_eventsv+0x38>
    1048:	7f c0       	rjmp	.+254    	; 0x1148 <_ZL14process_eventsv+0x136>
    104a:	86 38       	cpi	r24, 0x86	; 134
    104c:	09 f0       	breq	.+2      	; 0x1050 <_ZL14process_eventsv+0x3e>
    104e:	3e c1       	rjmp	.+636    	; 0x12cc <_ZL14process_eventsv+0x2ba>
    1050:	a5 c0       	rjmp	.+330    	; 0x119c <_ZL14process_eventsv+0x18a>
    1052:	8a 38       	cpi	r24, 0x8A	; 138
    1054:	09 f4       	brne	.+2      	; 0x1058 <_ZL14process_eventsv+0x46>
    1056:	e8 c0       	rjmp	.+464    	; 0x1228 <_ZL14process_eventsv+0x216>
    1058:	08 f4       	brcc	.+2      	; 0x105c <_ZL14process_eventsv+0x4a>
    105a:	99 c0       	rjmp	.+306    	; 0x118e <_ZL14process_eventsv+0x17c>
    105c:	8c 38       	cpi	r24, 0x8C	; 140
    105e:	21 f0       	breq	.+8      	; 0x1068 <_ZL14process_eventsv+0x56>
    1060:	8d 38       	cpi	r24, 0x8D	; 141
    1062:	09 f0       	breq	.+2      	; 0x1066 <_ZL14process_eventsv+0x54>
    1064:	33 c1       	rjmp	.+614    	; 0x12cc <_ZL14process_eventsv+0x2ba>
    1066:	fe c0       	rjmp	.+508    	; 0x1264 <_ZL14process_eventsv+0x252>
							lib_aci_connect(180/* in seconds */, 0x0100 /* advertising interval 100ms*/);
							Serial.println(F("Advertising started"));        
							break;
        
					case ACI_EVT_DATA_RECEIVED:
							for(int i=0; i<aci_evt->len - 2; i++)
    1068:	80 91 ba 03 	lds	r24, 0x03BA
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 97       	sbiw	r24, 0x02	; 2
    1070:	18 16       	cp	r1, r24
    1072:	19 06       	cpc	r1, r25
    1074:	0c f0       	brlt	.+2      	; 0x1078 <_ZL14process_eventsv+0x66>
    1076:	2a c1       	rjmp	.+596    	; 0x12cc <_ZL14process_eventsv+0x2ba>
							{
								if(rx_buffer_len == MAX_RX_BUFF) 
    1078:	80 91 08 03 	lds	r24, 0x0308
    107c:	80 34       	cpi	r24, 0x40	; 64
    107e:	09 f4       	brne	.+2      	; 0x1082 <_ZL14process_eventsv+0x70>
    1080:	25 c1       	rjmp	.+586    	; 0x12cc <_ZL14process_eventsv+0x2ba>
    1082:	ed eb       	ldi	r30, 0xBD	; 189
    1084:	f3 e0       	ldi	r31, 0x03	; 3
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
								}
								else
								{
									if(p_back == &rx_buff[MAX_RX_BUFF])
									{
										p_back = &rx_buff[0];
    108a:	49 e0       	ldi	r20, 0x09	; 9
    108c:	53 e0       	ldi	r21, 0x03	; 3
							lib_aci_connect(180/* in seconds */, 0x0100 /* advertising interval 100ms*/);
							Serial.println(F("Advertising started"));        
							break;
        
					case ACI_EVT_DATA_RECEIVED:
							for(int i=0; i<aci_evt->len - 2; i++)
    108e:	ca eb       	ldi	r28, 0xBA	; 186
    1090:	d3 e0       	ldi	r29, 0x03	; 3
    1092:	a1 c0       	rjmp	.+322    	; 0x11d6 <_ZL14process_eventsv+0x1c4>
				aci_evt = &aci_data.evt;    
				switch(aci_evt->evt_opcode)
				{
					/* As soon as you reset the nRF8001 you will get an ACI Device Started Event */
					case ACI_EVT_DEVICE_STARTED:
							aci_state.data_credit_total = aci_evt->params.device_started.credit_available;
    1094:	80 91 be 03 	lds	r24, 0x03BE
    1098:	80 93 5e 03 	sts	0x035E, r24
							
							switch(aci_evt->params.device_started.device_mode)
    109c:	80 91 bc 03 	lds	r24, 0x03BC
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	21 f0       	breq	.+8      	; 0x10ac <_ZL14process_eventsv+0x9a>
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	09 f0       	breq	.+2      	; 0x10aa <_ZL14process_eventsv+0x98>
    10a8:	11 c1       	rjmp	.+546    	; 0x12cc <_ZL14process_eventsv+0x2ba>
    10aa:	14 c0       	rjmp	.+40     	; 0x10d4 <_ZL14process_eventsv+0xc2>
							{
								case ACI_DEVICE_SETUP:
									/* When the device is in the setup mode*/
									Serial.println(F("Evt Device Started: Setup"));
    10ac:	61 e2       	ldi	r22, 0x21	; 33
    10ae:	73 e0       	ldi	r23, 0x03	; 3
    10b0:	82 e7       	ldi	r24, 0x72	; 114
    10b2:	94 e0       	ldi	r25, 0x04	; 4
    10b4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
									if (ACI_STATUS_TRANSACTION_COMPLETE != do_aci_setup(&aci_state))
    10b8:	8b e4       	ldi	r24, 0x4B	; 75
    10ba:	93 e0       	ldi	r25, 0x03	; 3
    10bc:	0e 94 38 03 	call	0x670	; 0x670 <_Z12do_aci_setupP11aci_state_t>
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <_ZL14process_eventsv+0xb4>
    10c4:	03 c1       	rjmp	.+518    	; 0x12cc <_ZL14process_eventsv+0x2ba>
									{
										Serial.println(F("Error in ACI Setup"));
    10c6:	6b e3       	ldi	r22, 0x3B	; 59
    10c8:	73 e0       	ldi	r23, 0x03	; 3
    10ca:	82 e7       	ldi	r24, 0x72	; 114
    10cc:	94 e0       	ldi	r25, 0x04	; 4
    10ce:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
    10d2:	fc c0       	rjmp	.+504    	; 0x12cc <_ZL14process_eventsv+0x2ba>
									}
									break;          
								case ACI_DEVICE_STANDBY:
									Serial.println(F("Evt Device Started: Standby"));
    10d4:	6e e4       	ldi	r22, 0x4E	; 78
    10d6:	73 e0       	ldi	r23, 0x03	; 3
    10d8:	82 e7       	ldi	r24, 0x72	; 114
    10da:	94 e0       	ldi	r25, 0x04	; 4
    10dc:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
									//Looking for an iPhone by sending radio advertisements
									//When an iPhone connects to us we will get an ACI_EVT_CONNECTED event from the nRF8001
									lib_aci_connect(180/* in seconds */, 0x0050 /* advertising interval 50ms*/);
    10e0:	60 e5       	ldi	r22, 0x50	; 80
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	84 eb       	ldi	r24, 0xB4	; 180
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z15lib_aci_connectjj>
									Serial.println(F("Advertising started"));
    10ec:	6a e6       	ldi	r22, 0x6A	; 106
    10ee:	73 e0       	ldi	r23, 0x03	; 3
    10f0:	82 e7       	ldi	r24, 0x72	; 114
    10f2:	94 e0       	ldi	r25, 0x04	; 4
    10f4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
									break;
    10f8:	e9 c0       	rjmp	.+466    	; 0x12cc <_ZL14process_eventsv+0x2ba>
							}
							break; //ACI Device Started Event
        
					case ACI_EVT_CMD_RSP:
							//If an ACI command response event comes with an error -> stop
							if (ACI_STATUS_SUCCESS != aci_evt->params.cmd_rsp.cmd_status)
    10fa:	80 91 bd 03 	lds	r24, 0x03BD
    10fe:	88 23       	and	r24, r24
    1100:	a9 f0       	breq	.+42     	; 0x112c <_ZL14process_eventsv+0x11a>
							{
								//ACI ReadDynamicData and ACI WriteDynamicData will have status codes of
								//TRANSACTION_CONTINUE and TRANSACTION_COMPLETE
								//all other ACI commands will have status code of ACI_STATUS_SCUCCESS for a successful command
								Serial.print(F("ACI Command "));
    1102:	6e e7       	ldi	r22, 0x7E	; 126
    1104:	73 e0       	ldi	r23, 0x03	; 3
    1106:	82 e7       	ldi	r24, 0x72	; 114
    1108:	94 e0       	ldi	r25, 0x04	; 4
    110a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN5Print5printEPK19__FlashStringHelper>
								Serial.println(aci_evt->params.cmd_rsp.cmd_opcode, HEX);
    110e:	40 e1       	ldi	r20, 0x10	; 16
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	60 91 bc 03 	lds	r22, 0x03BC
    1116:	82 e7       	ldi	r24, 0x72	; 114
    1118:	94 e0       	ldi	r25, 0x04	; 4
    111a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN5Print7printlnEhi>
								Serial.println(F("Evt Cmd respone: Error. Arduino is in an while(1); loop"));
    111e:	6b e8       	ldi	r22, 0x8B	; 139
    1120:	73 e0       	ldi	r23, 0x03	; 3
    1122:	82 e7       	ldi	r24, 0x72	; 114
    1124:	94 e0       	ldi	r25, 0x04	; 4
    1126:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
    112a:	ff cf       	rjmp	.-2      	; 0x112a <_ZL14process_eventsv+0x118>
								while (1);
							}
							if (ACI_CMD_GET_DEVICE_VERSION == aci_evt->params.cmd_rsp.cmd_opcode)
    112c:	80 91 bc 03 	lds	r24, 0x03BC
    1130:	89 30       	cpi	r24, 0x09	; 9
    1132:	09 f0       	breq	.+2      	; 0x1136 <_ZL14process_eventsv+0x124>
    1134:	cb c0       	rjmp	.+406    	; 0x12cc <_ZL14process_eventsv+0x2ba>
							{
								//Store the version and configuration information of the nRF8001 in the Hardware Revision String Characteristic
								lib_aci_set_local_data(&aci_state, PIPE_DEVICE_INFORMATION_HARDWARE_REVISION_STRING_SET, 
								(uint8_t *)&(aci_evt->params.cmd_rsp.params.get_device_version), sizeof(aci_evt_cmd_rsp_params_get_device_version_t));
    1136:	29 e0       	ldi	r18, 0x09	; 9
    1138:	4e eb       	ldi	r20, 0xBE	; 190
    113a:	53 e0       	ldi	r21, 0x03	; 3
    113c:	64 e0       	ldi	r22, 0x04	; 4
    113e:	8b e4       	ldi	r24, 0x4B	; 75
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_Z22lib_aci_set_local_dataP11aci_state_thPhh>
    1146:	c2 c0       	rjmp	.+388    	; 0x12cc <_ZL14process_eventsv+0x2ba>
							}        
							break;
        
					case ACI_EVT_CONNECTED:
							is_connected = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 b8 03 	sts	0x03B8, r24
							Serial.println(F("Evt Connected"));
    114e:	63 ec       	ldi	r22, 0xC3	; 195
    1150:	73 e0       	ldi	r23, 0x03	; 3
    1152:	82 e7       	ldi	r24, 0x72	; 114
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
							aci_state.data_credit_available = aci_state.data_credit_total; 
    115a:	80 91 5e 03 	lds	r24, 0x035E
    115e:	80 93 60 03 	sts	0x0360, r24
							/*Get the device version of the nRF8001 and store it in the Hardware Revision String*/
							lib_aci_device_version();
    1162:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z22lib_aci_device_versionv>
							break;
    1166:	b2 c0       	rjmp	.+356    	; 0x12cc <_ZL14process_eventsv+0x2ba>
        
					case ACI_EVT_PIPE_STATUS:
							Serial.println(F("Evt Pipe Status"));
    1168:	61 ed       	ldi	r22, 0xD1	; 209
    116a:	73 e0       	ldi	r23, 0x03	; 3
    116c:	82 e7       	ldi	r24, 0x72	; 114
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
							if (lib_aci_is_pipe_available(&aci_state, PIPE_UART_OVER_BTLE_UART_TX_TX) && (false == timing_change_done))
    1174:	63 e0       	ldi	r22, 0x03	; 3
    1176:	8b e4       	ldi	r24, 0x4B	; 75
    1178:	93 e0       	ldi	r25, 0x03	; 3
    117a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_Z25lib_aci_is_pipe_availableP11aci_state_th>
    117e:	88 23       	and	r24, r24
    1180:	09 f4       	brne	.+2      	; 0x1184 <_ZL14process_eventsv+0x172>
    1182:	a4 c0       	rjmp	.+328    	; 0x12cc <_ZL14process_eventsv+0x2ba>
    1184:	80 91 db 03 	lds	r24, 0x03DB
    1188:	81 11       	cpse	r24, r1
    118a:	a0 c0       	rjmp	.+320    	; 0x12cc <_ZL14process_eventsv+0x2ba>
    118c:	9a c0       	rjmp	.+308    	; 0x12c2 <_ZL14process_eventsv+0x2b0>
								timing_change_done = true;
							}
							break;
        
					case ACI_EVT_TIMING:
							Serial.println(F("Evt link connection interval changed"));
    118e:	61 ee       	ldi	r22, 0xE1	; 225
    1190:	73 e0       	ldi	r23, 0x03	; 3
    1192:	82 e7       	ldi	r24, 0x72	; 114
    1194:	94 e0       	ldi	r25, 0x04	; 4
    1196:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
							break;
    119a:	98 c0       	rjmp	.+304    	; 0x12cc <_ZL14process_eventsv+0x2ba>
        
					case ACI_EVT_DISCONNECTED:
							is_connected = 0;
    119c:	10 92 b8 03 	sts	0x03B8, r1
							ack = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 07 03 	sts	0x0307, r24
							Serial.println(F("Evt Disconnected/Advertising timed out"));
    11a6:	66 e0       	ldi	r22, 0x06	; 6
    11a8:	74 e0       	ldi	r23, 0x04	; 4
    11aa:	82 e7       	ldi	r24, 0x72	; 114
    11ac:	94 e0       	ldi	r25, 0x04	; 4
    11ae:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
							lib_aci_connect(180/* in seconds */, 0x0100 /* advertising interval 100ms*/);
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	71 e0       	ldi	r23, 0x01	; 1
    11b6:	84 eb       	ldi	r24, 0xB4	; 180
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z15lib_aci_connectjj>
							Serial.println(F("Advertising started"));        
    11be:	6d e2       	ldi	r22, 0x2D	; 45
    11c0:	74 e0       	ldi	r23, 0x04	; 4
    11c2:	82 e7       	ldi	r24, 0x72	; 114
    11c4:	94 e0       	ldi	r25, 0x04	; 4
    11c6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
							break;
    11ca:	80 c0       	rjmp	.+256    	; 0x12cc <_ZL14process_eventsv+0x2ba>
        
					case ACI_EVT_DATA_RECEIVED:
							for(int i=0; i<aci_evt->len - 2; i++)
							{
								if(rx_buffer_len == MAX_RX_BUFF) 
    11cc:	20 91 08 03 	lds	r18, 0x0308
    11d0:	20 34       	cpi	r18, 0x40	; 64
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <_ZL14process_eventsv+0x1c4>
    11d4:	7b c0       	rjmp	.+246    	; 0x12cc <_ZL14process_eventsv+0x2ba>
								{	
									break;
								}
								else
								{
									if(p_back == &rx_buff[MAX_RX_BUFF])
    11d6:	20 91 0f 01 	lds	r18, 0x010F
    11da:	30 91 10 01 	lds	r19, 0x0110
    11de:	29 54       	subi	r18, 0x49	; 73
    11e0:	33 40       	sbci	r19, 0x03	; 3
    11e2:	21 f4       	brne	.+8      	; 0x11ec <_ZL14process_eventsv+0x1da>
									{
										p_back = &rx_buff[0];
    11e4:	50 93 10 01 	sts	0x0110, r21
    11e8:	40 93 0f 01 	sts	0x010F, r20
									}
									*p_back = aci_evt->params.data_received.rx_data.aci_data[i];							
    11ec:	a0 91 0f 01 	lds	r26, 0x010F
    11f0:	b0 91 10 01 	lds	r27, 0x0110
    11f4:	21 91       	ld	r18, Z+
    11f6:	2c 93       	st	X, r18
									rx_buffer_len++;
    11f8:	20 91 08 03 	lds	r18, 0x0308
    11fc:	2f 5f       	subi	r18, 0xFF	; 255
    11fe:	20 93 08 03 	sts	0x0308, r18
									p_back++;
    1202:	20 91 0f 01 	lds	r18, 0x010F
    1206:	30 91 10 01 	lds	r19, 0x0110
    120a:	2f 5f       	subi	r18, 0xFF	; 255
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	30 93 10 01 	sts	0x0110, r19
    1212:	20 93 0f 01 	sts	0x010F, r18
							lib_aci_connect(180/* in seconds */, 0x0100 /* advertising interval 100ms*/);
							Serial.println(F("Advertising started"));        
							break;
        
					case ACI_EVT_DATA_RECEIVED:
							for(int i=0; i<aci_evt->len - 2; i++)
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	28 81       	ld	r18, Y
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	22 50       	subi	r18, 0x02	; 2
    121e:	31 09       	sbc	r19, r1
    1220:	82 17       	cp	r24, r18
    1222:	93 07       	cpc	r25, r19
    1224:	9c f2       	brlt	.-90     	; 0x11cc <_ZL14process_eventsv+0x1ba>
    1226:	52 c0       	rjmp	.+164    	; 0x12cc <_ZL14process_eventsv+0x2ba>
								}
							}
							break;
   
					case ACI_EVT_DATA_CREDIT:
							aci_state.data_credit_available = aci_state.data_credit_available + aci_evt->params.data_credit.credit;
    1228:	c0 e6       	ldi	r28, 0x60	; 96
    122a:	d3 e0       	ldi	r29, 0x03	; 3
    122c:	90 91 bc 03 	lds	r25, 0x03BC
    1230:	88 81       	ld	r24, Y
    1232:	89 0f       	add	r24, r25
    1234:	88 83       	st	Y, r24
							Serial.print("ACI_EVT_DATA_CREDIT     ");
    1236:	6b e2       	ldi	r22, 0x2B	; 43
    1238:	71 e0       	ldi	r23, 0x01	; 1
    123a:	82 e7       	ldi	r24, 0x72	; 114
    123c:	94 e0       	ldi	r25, 0x04	; 4
    123e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
							Serial.print("Data Credit available: ");
    1242:	64 e4       	ldi	r22, 0x44	; 68
    1244:	71 e0       	ldi	r23, 0x01	; 1
    1246:	82 e7       	ldi	r24, 0x72	; 114
    1248:	94 e0       	ldi	r25, 0x04	; 4
    124a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
							Serial.println(aci_state.data_credit_available,DEC);
    124e:	4a e0       	ldi	r20, 0x0A	; 10
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	68 81       	ld	r22, Y
    1254:	82 e7       	ldi	r24, 0x72	; 114
    1256:	94 e0       	ldi	r25, 0x04	; 4
    1258:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN5Print7printlnEhi>
							ack=1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 07 03 	sts	0x0307, r24
							break;
    1262:	34 c0       	rjmp	.+104    	; 0x12cc <_ZL14process_eventsv+0x2ba>
      
					case ACI_EVT_PIPE_ERROR:
							//See the appendix in the nRF8001 Product Specication for details on the error codes
							Serial.print(F("ACI Evt Pipe Error: Pipe #:"));
    1264:	61 e4       	ldi	r22, 0x41	; 65
    1266:	74 e0       	ldi	r23, 0x04	; 4
    1268:	82 e7       	ldi	r24, 0x72	; 114
    126a:	94 e0       	ldi	r25, 0x04	; 4
    126c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN5Print5printEPK19__FlashStringHelper>
							Serial.print(aci_evt->params.pipe_error.pipe_number, DEC);
    1270:	4a e0       	ldi	r20, 0x0A	; 10
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	60 91 bc 03 	lds	r22, 0x03BC
    1278:	82 e7       	ldi	r24, 0x72	; 114
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN5Print5printEhi>
							Serial.print(F("  Pipe Error Code: 0x"));
    1280:	6d e5       	ldi	r22, 0x5D	; 93
    1282:	74 e0       	ldi	r23, 0x04	; 4
    1284:	82 e7       	ldi	r24, 0x72	; 114
    1286:	94 e0       	ldi	r25, 0x04	; 4
    1288:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN5Print5printEPK19__FlashStringHelper>
							Serial.println(aci_evt->params.pipe_error.error_code, HEX);
    128c:	40 e1       	ldi	r20, 0x10	; 16
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	60 91 bd 03 	lds	r22, 0x03BD
    1294:	82 e7       	ldi	r24, 0x72	; 114
    1296:	94 e0       	ldi	r25, 0x04	; 4
    1298:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN5Print7printlnEhi>
                
							//Increment the credit available as the data packet was not sent
							aci_state.data_credit_available++;
    129c:	c0 e6       	ldi	r28, 0x60	; 96
    129e:	d3 e0       	ldi	r29, 0x03	; 3
    12a0:	88 81       	ld	r24, Y
    12a2:	8f 5f       	subi	r24, 0xFF	; 255
    12a4:	88 83       	st	Y, r24
							Serial.print("Data Credit available: ");
    12a6:	64 e4       	ldi	r22, 0x44	; 68
    12a8:	71 e0       	ldi	r23, 0x01	; 1
    12aa:	82 e7       	ldi	r24, 0x72	; 114
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
							Serial.println(aci_state.data_credit_available,DEC);
    12b2:	4a e0       	ldi	r20, 0x0A	; 10
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	68 81       	ld	r22, Y
    12b8:	82 e7       	ldi	r24, 0x72	; 114
    12ba:	94 e0       	ldi	r25, 0x04	; 4
    12bc:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN5Print7printlnEhi>
							break;         
    12c0:	05 c0       	rjmp	.+10     	; 0x12cc <_ZL14process_eventsv+0x2ba>
        
					case ACI_EVT_PIPE_STATUS:
							Serial.println(F("Evt Pipe Status"));
							if (lib_aci_is_pipe_available(&aci_state, PIPE_UART_OVER_BTLE_UART_TX_TX) && (false == timing_change_done))
							{
								lib_aci_change_timing_GAP_PPCP(); // change the timing on the link as specified in the nRFgo studio -> nRF8001 conf. -> GAP. 
    12c2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z30lib_aci_change_timing_GAP_PPCPv>
																								// Used to increase or decrease bandwidth
								timing_change_done = true;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 db 03 	sts	0x03DB, r24
				//Serial.println(F("No ACI Events available"));
				// No event in the ACI Event queue and if there is no event in the ACI command queue the arduino can go to sleep
				// Arduino can go to sleep now
				// Wakeup from sleep from the RDYN line
			}
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <_Z9ble_beginv>:
void ble_begin()
{
		 /* Point ACI data structures to the the setup data that the nRFgo studio generated for the nRF8001 */   
		if (NULL != services_pipe_type_mapping)
		{
				aci_state.aci_setup_info.services_pipe_type_mapping = &services_pipe_type_mapping[0];
    12d2:	85 e1       	ldi	r24, 0x15	; 21
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	90 93 58 03 	sts	0x0358, r25
    12da:	80 93 57 03 	sts	0x0357, r24
		}
		else
		{
				aci_state.aci_setup_info.services_pipe_type_mapping = NULL;
		 }
		aci_state.aci_setup_info.number_of_pipes    = NUMBER_OF_PIPES;
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	80 93 59 03 	sts	0x0359, r24
		aci_state.aci_setup_info.setup_msgs         = setup_msgs;
    12e4:	8c e6       	ldi	r24, 0x6C	; 108
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	90 93 5b 03 	sts	0x035B, r25
    12ec:	80 93 5a 03 	sts	0x035A, r24
		aci_state.aci_setup_info.num_setup_msgs     = NB_SETUP_MESSAGES;
    12f0:	85 e1       	ldi	r24, 0x15	; 21
    12f2:	80 93 5c 03 	sts	0x035C, r24

			/*
		Tell the ACI library, the MCU to nRF8001 pin connections.
		The Active pin is optional and can be marked UNUSED
		*/	  	
		aci_state.aci_pins.board_name = REDBEARLAB_SHIELD_V1_1; //See board.h for details
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	90 93 4b 03 	sts	0x034B, r25
		aci_state.aci_pins.reqn_pin   = reqn_pin;
    12fc:	80 91 13 01 	lds	r24, 0x0113
    1300:	80 93 4c 03 	sts	0x034C, r24
		aci_state.aci_pins.rdyn_pin   = rdyn_pin;
    1304:	80 91 14 01 	lds	r24, 0x0114
    1308:	80 93 4d 03 	sts	0x034D, r24
		aci_state.aci_pins.mosi_pin   = MOSI;
    130c:	8b e0       	ldi	r24, 0x0B	; 11
    130e:	80 93 4e 03 	sts	0x034E, r24
		aci_state.aci_pins.miso_pin   = MISO;
    1312:	8c e0       	ldi	r24, 0x0C	; 12
    1314:	80 93 4f 03 	sts	0x034F, r24
		aci_state.aci_pins.sck_pin    = SCK;
    1318:	8d e0       	ldi	r24, 0x0D	; 13
    131a:	80 93 50 03 	sts	0x0350, r24
	
#if defined(__SAM3X8E__)
		aci_state.aci_pins.spi_clock_divider     = 84;
#else
		aci_state.aci_pins.spi_clock_divider     = SPI_CLOCK_DIV8;
    131e:	85 e0       	ldi	r24, 0x05	; 5
    1320:	80 93 51 03 	sts	0x0351, r24
#endif
	  
		aci_state.aci_pins.reset_pin             = UNUSED;
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	80 93 52 03 	sts	0x0352, r24
		aci_state.aci_pins.active_pin            = UNUSED;
    132a:	80 93 53 03 	sts	0x0353, r24
		aci_state.aci_pins.optional_chip_sel_pin = UNUSED;
    132e:	80 93 54 03 	sts	0x0354, r24
	  
		aci_state.aci_pins.interface_is_interrupt	  = false;
    1332:	10 92 55 03 	sts	0x0355, r1
		aci_state.aci_pins.interrupt_number			  = 1;
    1336:	90 93 56 03 	sts	0x0356, r25

		//Turn debug printing on for the ACI Commands and Events to be printed on the Serial
		lib_aci_debug_print(true);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_Z19lib_aci_debug_printb>

		/*We reset the nRF8001 here by toggling the RESET line connected to the nRF8001
		and initialize the data structures required to setup the nRF8001*/
		lib_aci_init(&aci_state); 
    1340:	8b e4       	ldi	r24, 0x4B	; 75
    1342:	93 e0       	ldi	r25, 0x03	; 3
    1344:	0e 94 9a 07 	call	0xf34	; 0xf34 <_Z12lib_aci_initP11aci_state_t>
		delay(100);
    1348:	64 e6       	ldi	r22, 0x64	; 100
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 a5 0b 	call	0x174a	; 0x174a <delay>
    1354:	08 95       	ret

00001356 <_Z8ble_readv>:
}

int ble_read()
{
	int data;
	if(rx_buffer_len == 0) return -1;
    1356:	40 91 08 03 	lds	r20, 0x0308
    135a:	44 23       	and	r20, r20
    135c:	d9 f0       	breq	.+54     	; 0x1394 <_Z8ble_readv+0x3e>
	if(p_before == &rx_buff[MAX_RX_BUFF])
    135e:	80 91 11 01 	lds	r24, 0x0111
    1362:	90 91 12 01 	lds	r25, 0x0112
    1366:	89 54       	subi	r24, 0x49	; 73
    1368:	93 40       	sbci	r25, 0x03	; 3
    136a:	31 f4       	brne	.+12     	; 0x1378 <_Z8ble_readv+0x22>
	{
			p_before = &rx_buff[0];
    136c:	89 e0       	ldi	r24, 0x09	; 9
    136e:	93 e0       	ldi	r25, 0x03	; 3
    1370:	90 93 12 01 	sts	0x0112, r25
    1374:	80 93 11 01 	sts	0x0111, r24
	}
	data = *p_before;
    1378:	e0 91 11 01 	lds	r30, 0x0111
    137c:	f0 91 12 01 	lds	r31, 0x0112
    1380:	21 91       	ld	r18, Z+
    1382:	30 e0       	ldi	r19, 0x00	; 0
	p_before ++;
    1384:	f0 93 12 01 	sts	0x0112, r31
    1388:	e0 93 11 01 	sts	0x0111, r30
	rx_buffer_len--;
    138c:	41 50       	subi	r20, 0x01	; 1
    138e:	40 93 08 03 	sts	0x0308, r20
	return data;
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <_Z8ble_readv+0x42>
}

int ble_read()
{
	int data;
	if(rx_buffer_len == 0) return -1;
    1394:	2f ef       	ldi	r18, 0xFF	; 255
    1396:	3f ef       	ldi	r19, 0xFF	; 255
	}
	data = *p_before;
	p_before ++;
	rx_buffer_len--;
	return data;
}
    1398:	82 2f       	mov	r24, r18
    139a:	93 2f       	mov	r25, r19
    139c:	08 95       	ret

0000139e <_Z13ble_availablev>:

unsigned char ble_available()
{
	return rx_buffer_len;
}
    139e:	80 91 08 03 	lds	r24, 0x0308
    13a2:	08 95       	ret

000013a4 <_Z13ble_connectedv>:

unsigned char ble_connected()
{
    return is_connected;
}
    13a4:	80 91 b8 03 	lds	r24, 0x03B8
    13a8:	08 95       	ret

000013aa <_Z13ble_do_eventsv>:
				// Wakeup from sleep from the RDYN line
			}
}

void ble_do_events()
{
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
			if (lib_aci_is_pipe_available(&aci_state, PIPE_UART_OVER_BTLE_UART_TX_TX))
    13b0:	63 e0       	ldi	r22, 0x03	; 3
    13b2:	8b e4       	ldi	r24, 0x4B	; 75
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_Z25lib_aci_is_pipe_availableP11aci_state_th>
    13ba:	88 23       	and	r24, r24
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <_Z13ble_do_eventsv+0x16>
    13be:	99 c0       	rjmp	.+306    	; 0x14f2 <_Z13ble_do_eventsv+0x148>
			{
				if(tx_buffer_len > 0)
    13c0:	80 91 4a 03 	lds	r24, 0x034A
    13c4:	81 11       	cpse	r24, r1
    13c6:	49 c0       	rjmp	.+146    	; 0x145a <_Z13ble_do_eventsv+0xb0>
    13c8:	94 c0       	rjmp	.+296    	; 0x14f2 <_Z13ble_do_eventsv+0x148>
				{	
					unsigned char Index = 0;
					while(tx_buffer_len > 20)
					{
						if(true == lib_aci_send_data(PIPE_UART_OVER_BTLE_UART_TX_TX, &tx_buff[Index], 20))
    13ca:	61 2f       	mov	r22, r17
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	68 58       	subi	r22, 0x88	; 136
    13d0:	7c 4f       	sbci	r23, 0xFC	; 252
    13d2:	44 e1       	ldi	r20, 0x14	; 20
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_Z17lib_aci_send_datahPhh>
    13da:	88 23       	and	r24, r24
    13dc:	a9 f0       	breq	.+42     	; 0x1408 <_Z13ble_do_eventsv+0x5e>
						{
							Serial.print("data transmmit success!  Length: ");
    13de:	6c e5       	ldi	r22, 0x5C	; 92
    13e0:	71 e0       	ldi	r23, 0x01	; 1
    13e2:	82 e7       	ldi	r24, 0x72	; 114
    13e4:	94 e0       	ldi	r25, 0x04	; 4
    13e6:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
							Serial.print(20, DEC);
    13ea:	4a e0       	ldi	r20, 0x0A	; 10
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	64 e1       	ldi	r22, 0x14	; 20
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	82 e7       	ldi	r24, 0x72	; 114
    13f4:	94 e0       	ldi	r25, 0x04	; 4
    13f6:	0e 94 bf 10 	call	0x217e	; 0x217e <_ZN5Print5printEii>
							Serial.print("    ");
    13fa:	6f e3       	ldi	r22, 0x3F	; 63
    13fc:	71 e0       	ldi	r23, 0x01	; 1
    13fe:	82 e7       	ldi	r24, 0x72	; 114
    1400:	94 e0       	ldi	r25, 0x04	; 4
    1402:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <_Z13ble_do_eventsv+0x6a>
						}
						else
						{
							Serial.println("data transmmit fail !");
    1408:	6e e7       	ldi	r22, 0x7E	; 126
    140a:	71 e0       	ldi	r23, 0x01	; 1
    140c:	82 e7       	ldi	r24, 0x72	; 114
    140e:	94 e0       	ldi	r25, 0x04	; 4
    1410:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN5Print7printlnEPKc>
						}
						tx_buffer_len -= 20;
    1414:	80 91 4a 03 	lds	r24, 0x034A
    1418:	84 51       	subi	r24, 0x14	; 20
    141a:	80 93 4a 03 	sts	0x034A, r24
						Index += 20;
    141e:	1c 5e       	subi	r17, 0xEC	; 236
						aci_state.data_credit_available--;
    1420:	88 81       	ld	r24, Y
    1422:	81 50       	subi	r24, 0x01	; 1
    1424:	88 83       	st	Y, r24
						Serial.print("Data Credit available: ");
    1426:	64 e4       	ldi	r22, 0x44	; 68
    1428:	71 e0       	ldi	r23, 0x01	; 1
    142a:	82 e7       	ldi	r24, 0x72	; 114
    142c:	94 e0       	ldi	r25, 0x04	; 4
    142e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
						Serial.println(aci_state.data_credit_available,DEC);
    1432:	4a e0       	ldi	r20, 0x0A	; 10
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	68 81       	ld	r22, Y
    1438:	82 e7       	ldi	r24, 0x72	; 114
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN5Print7printlnEhi>
						ack = 0;
    1440:	10 92 07 03 	sts	0x0307, r1
						while (!ack)
    1444:	80 91 07 03 	lds	r24, 0x0307
    1448:	81 11       	cpse	r24, r1
    144a:	0a c0       	rjmp	.+20     	; 0x1460 <_Z13ble_do_eventsv+0xb6>
							process_events();
    144c:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZL14process_eventsv>
						Index += 20;
						aci_state.data_credit_available--;
						Serial.print("Data Credit available: ");
						Serial.println(aci_state.data_credit_available,DEC);
						ack = 0;
						while (!ack)
    1450:	80 91 07 03 	lds	r24, 0x0307
    1454:	81 11       	cpse	r24, r1
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <_Z13ble_do_eventsv+0xb6>
    1458:	f9 cf       	rjmp	.-14     	; 0x144c <_Z13ble_do_eventsv+0xa2>

void ble_do_events()
{
			if (lib_aci_is_pipe_available(&aci_state, PIPE_UART_OVER_BTLE_UART_TX_TX))
			{
				if(tx_buffer_len > 0)
    145a:	10 e0       	ldi	r17, 0x00	; 0
						{
							Serial.println("data transmmit fail !");
						}
						tx_buffer_len -= 20;
						Index += 20;
						aci_state.data_credit_available--;
    145c:	c0 e6       	ldi	r28, 0x60	; 96
    145e:	d3 e0       	ldi	r29, 0x03	; 3
			if (lib_aci_is_pipe_available(&aci_state, PIPE_UART_OVER_BTLE_UART_TX_TX))
			{
				if(tx_buffer_len > 0)
				{	
					unsigned char Index = 0;
					while(tx_buffer_len > 20)
    1460:	40 91 4a 03 	lds	r20, 0x034A
    1464:	45 31       	cpi	r20, 0x15	; 21
    1466:	08 f0       	brcs	.+2      	; 0x146a <_Z13ble_do_eventsv+0xc0>
    1468:	b0 cf       	rjmp	.-160    	; 0x13ca <_Z13ble_do_eventsv+0x20>
						ack = 0;
						while (!ack)
							process_events();
					}

						if(true == lib_aci_send_data(PIPE_UART_OVER_BTLE_UART_TX_TX,& tx_buff[Index], tx_buffer_len))
    146a:	61 2f       	mov	r22, r17
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	68 58       	subi	r22, 0x88	; 136
    1470:	7c 4f       	sbci	r23, 0xFC	; 252
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_Z17lib_aci_send_datahPhh>
    1478:	88 23       	and	r24, r24
    147a:	a9 f0       	breq	.+42     	; 0x14a6 <_Z13ble_do_eventsv+0xfc>
						{
							Serial.print("data transmmit success!  Length: ");
    147c:	6c e5       	ldi	r22, 0x5C	; 92
    147e:	71 e0       	ldi	r23, 0x01	; 1
    1480:	82 e7       	ldi	r24, 0x72	; 114
    1482:	94 e0       	ldi	r25, 0x04	; 4
    1484:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
							Serial.print(tx_buffer_len, DEC);
    1488:	4a e0       	ldi	r20, 0x0A	; 10
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	60 91 4a 03 	lds	r22, 0x034A
    1490:	82 e7       	ldi	r24, 0x72	; 114
    1492:	94 e0       	ldi	r25, 0x04	; 4
    1494:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN5Print5printEhi>
							Serial.print("    ");
    1498:	6f e3       	ldi	r22, 0x3F	; 63
    149a:	71 e0       	ldi	r23, 0x01	; 1
    149c:	82 e7       	ldi	r24, 0x72	; 114
    149e:	94 e0       	ldi	r25, 0x04	; 4
    14a0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <_Z13ble_do_eventsv+0x108>
						}
						else
						{
							Serial.println("data transmmit fail !");
    14a6:	6e e7       	ldi	r22, 0x7E	; 126
    14a8:	71 e0       	ldi	r23, 0x01	; 1
    14aa:	82 e7       	ldi	r24, 0x72	; 114
    14ac:	94 e0       	ldi	r25, 0x04	; 4
    14ae:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN5Print7printlnEPKc>
						}
						tx_buffer_len = 0;
    14b2:	10 92 4a 03 	sts	0x034A, r1
						aci_state.data_credit_available--;
    14b6:	c0 e6       	ldi	r28, 0x60	; 96
    14b8:	d3 e0       	ldi	r29, 0x03	; 3
    14ba:	88 81       	ld	r24, Y
    14bc:	81 50       	subi	r24, 0x01	; 1
    14be:	88 83       	st	Y, r24
						Serial.print("Data Credit available: ");
    14c0:	64 e4       	ldi	r22, 0x44	; 68
    14c2:	71 e0       	ldi	r23, 0x01	; 1
    14c4:	82 e7       	ldi	r24, 0x72	; 114
    14c6:	94 e0       	ldi	r25, 0x04	; 4
    14c8:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5Print5printEPKc>
						Serial.println(aci_state.data_credit_available,DEC);
    14cc:	4a e0       	ldi	r20, 0x0A	; 10
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	68 81       	ld	r22, Y
    14d2:	82 e7       	ldi	r24, 0x72	; 114
    14d4:	94 e0       	ldi	r25, 0x04	; 4
    14d6:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN5Print7printlnEhi>
						ack = 0;
    14da:	10 92 07 03 	sts	0x0307, r1
						while (!ack)
    14de:	80 91 07 03 	lds	r24, 0x0307
    14e2:	81 11       	cpse	r24, r1
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <_Z13ble_do_eventsv+0x148>
							process_events();
    14e6:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZL14process_eventsv>
						tx_buffer_len = 0;
						aci_state.data_credit_available--;
						Serial.print("Data Credit available: ");
						Serial.println(aci_state.data_credit_available,DEC);
						ack = 0;
						while (!ack)
    14ea:	80 91 07 03 	lds	r24, 0x0307
    14ee:	88 23       	and	r24, r24
    14f0:	d1 f3       	breq	.-12     	; 0x14e6 <_Z13ble_do_eventsv+0x13c>
							process_events();
				}
			}
			process_events();
    14f2:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZL14process_eventsv>
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	08 95       	ret

000014fe <setup>:

// the setup routine runs once when you press reset:
void setup() {
	
	// Init. and start BLE library.
	ble_begin();
    14fe:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z9ble_beginv>
	
	// Enable serial debug
	Serial.begin(115200);
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	52 ec       	ldi	r21, 0xC2	; 194
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	82 e7       	ldi	r24, 0x72	; 114
    150c:	94 e0       	ldi	r25, 0x04	; 4
    150e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN14HardwareSerial5beginEm>
	// initialize the digital pin as an output.
	pinMode(led, OUTPUT);
    1512:	61 e0       	ldi	r22, 0x01	; 1
    1514:	80 91 21 01 	lds	r24, 0x0121
    1518:	0e 94 39 0c 	call	0x1872	; 0x1872 <pinMode>
	
	Serial.println(F("Device started"));
    151c:	63 e7       	ldi	r22, 0x73	; 115
    151e:	74 e0       	ldi	r23, 0x04	; 4
    1520:	82 e7       	ldi	r24, 0x72	; 114
    1522:	94 e0       	ldi	r25, 0x04	; 4
    1524:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1528:	08 95       	ret

0000152a <loop>:
}

bool bleconnected = false;
// the loop routine runs over and over again forever:
void loop() {
    152a:	cf 93       	push	r28
//	digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
	
	while(ble_available())
    152c:	10 c0       	rjmp	.+32     	; 0x154e <loop+0x24>
	{
		// read out command and data
		byte data0 = ble_read();
    152e:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z8ble_readv>
    1532:	c8 2f       	mov	r28, r24
		Serial.print(F("Got BLE BYTE : "));
    1534:	62 e8       	ldi	r22, 0x82	; 130
    1536:	74 e0       	ldi	r23, 0x04	; 4
    1538:	82 e7       	ldi	r24, 0x72	; 114
    153a:	94 e0       	ldi	r25, 0x04	; 4
    153c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(data0);
    1540:	4a e0       	ldi	r20, 0x0A	; 10
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	6c 2f       	mov	r22, r28
    1546:	82 e7       	ldi	r24, 0x72	; 114
    1548:	94 e0       	ldi	r25, 0x04	; 4
    154a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN5Print7printlnEhi>
bool bleconnected = false;
// the loop routine runs over and over again forever:
void loop() {
//	digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
	
	while(ble_available())
    154e:	0e 94 cf 09 	call	0x139e	; 0x139e <_Z13ble_availablev>
    1552:	81 11       	cpse	r24, r1
    1554:	ec cf       	rjmp	.-40     	; 0x152e <loop+0x4>
		byte data0 = ble_read();
		Serial.print(F("Got BLE BYTE : "));
		Serial.println(data0);
	}
	
	if (!ble_connected())
    1556:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_Z13ble_connectedv>
    155a:	81 11       	cpse	r24, r1
    155c:	0d c0       	rjmp	.+26     	; 0x1578 <loop+0x4e>
	{
		if(bleconnected)
    155e:	80 91 dc 03 	lds	r24, 0x03DC
    1562:	88 23       	and	r24, r24
    1564:	31 f0       	breq	.+12     	; 0x1572 <loop+0x48>
			Serial.print(F("BLE disconnected"));
    1566:	62 e9       	ldi	r22, 0x92	; 146
    1568:	74 e0       	ldi	r23, 0x04	; 4
    156a:	82 e7       	ldi	r24, 0x72	; 114
    156c:	94 e0       	ldi	r25, 0x04	; 4
    156e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN5Print5printEPK19__FlashStringHelper>
			
		bleconnected = false;
    1572:	10 92 dc 03 	sts	0x03DC, r1
    1576:	0d c0       	rjmp	.+26     	; 0x1592 <loop+0x68>
	}
	else
	{
		if(!bleconnected)
    1578:	80 91 dc 03 	lds	r24, 0x03DC
    157c:	81 11       	cpse	r24, r1
    157e:	06 c0       	rjmp	.+12     	; 0x158c <loop+0x62>
			Serial.print(F("BLE connected"));
    1580:	63 ea       	ldi	r22, 0xA3	; 163
    1582:	74 e0       	ldi	r23, 0x04	; 4
    1584:	82 e7       	ldi	r24, 0x72	; 114
    1586:	94 e0       	ldi	r25, 0x04	; 4
    1588:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN5Print5printEPK19__FlashStringHelper>
		
		bleconnected = true;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 dc 03 	sts	0x03DC, r24
		
	}
	
	// Allow BLE Shield to send/receive data
	ble_do_events();
    1592:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_Z13ble_do_eventsv>
	
}
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    159a:	82 30       	cpi	r24, 0x02	; 2
    159c:	00 f5       	brcc	.+64     	; 0x15de <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    159e:	e8 2f       	mov	r30, r24
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	e3 52       	subi	r30, 0x23	; 35
    15a8:	fc 4f       	sbci	r31, 0xFC	; 252
    15aa:	71 83       	std	Z+1, r23	; 0x01
    15ac:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    15ae:	88 23       	and	r24, r24
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <attachInterrupt+0x1e>
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	a1 f4       	brne	.+40     	; 0x15de <attachInterrupt+0x44>
    15b6:	08 c0       	rjmp	.+16     	; 0x15c8 <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    15b8:	80 91 69 00 	lds	r24, 0x0069
    15bc:	8c 7f       	andi	r24, 0xFC	; 252
    15be:	84 2b       	or	r24, r20
    15c0:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    15c4:	e8 9a       	sbi	0x1d, 0	; 29
    15c6:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    15c8:	80 91 69 00 	lds	r24, 0x0069
    15cc:	44 0f       	add	r20, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	44 0f       	add	r20, r20
    15d2:	55 1f       	adc	r21, r21
    15d4:	83 7f       	andi	r24, 0xF3	; 243
    15d6:	84 2b       	or	r24, r20
    15d8:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    15dc:	e9 9a       	sbi	0x1d, 1	; 29
    15de:	08 95       	ret

000015e0 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	80 f4       	brcc	.+32     	; 0x1604 <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    15e4:	88 23       	and	r24, r24
    15e6:	19 f0       	breq	.+6      	; 0x15ee <detachInterrupt+0xe>
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	21 f4       	brne	.+8      	; 0x15f4 <detachInterrupt+0x14>
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <detachInterrupt+0x12>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    15ee:	e8 98       	cbi	0x1d, 0	; 29
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <detachInterrupt+0x14>
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    15f2:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    15f4:	e8 2f       	mov	r30, r24
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	ee 0f       	add	r30, r30
    15fa:	ff 1f       	adc	r31, r31
    15fc:	e3 52       	subi	r30, 0x23	; 35
    15fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1600:	11 82       	std	Z+1, r1	; 0x01
    1602:	10 82       	st	Z, r1
    1604:	08 95       	ret

00001606 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	2f 93       	push	r18
    1612:	3f 93       	push	r19
    1614:	4f 93       	push	r20
    1616:	5f 93       	push	r21
    1618:	6f 93       	push	r22
    161a:	7f 93       	push	r23
    161c:	8f 93       	push	r24
    161e:	9f 93       	push	r25
    1620:	af 93       	push	r26
    1622:	bf 93       	push	r27
    1624:	ef 93       	push	r30
    1626:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    1628:	80 91 dd 03 	lds	r24, 0x03DD
    162c:	90 91 de 03 	lds	r25, 0x03DE
    1630:	89 2b       	or	r24, r25
    1632:	29 f0       	breq	.+10     	; 0x163e <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    1634:	e0 91 dd 03 	lds	r30, 0x03DD
    1638:	f0 91 de 03 	lds	r31, 0x03DE
    163c:	09 95       	icall
}
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	bf 91       	pop	r27
    1644:	af 91       	pop	r26
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	7f 91       	pop	r23
    164c:	6f 91       	pop	r22
    164e:	5f 91       	pop	r21
    1650:	4f 91       	pop	r20
    1652:	3f 91       	pop	r19
    1654:	2f 91       	pop	r18
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	0f 90       	pop	r0
    165c:	1f 90       	pop	r1
    165e:	18 95       	reti

00001660 <__vector_2>:

ISR(INT1_vect) {
    1660:	1f 92       	push	r1
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	0f 92       	push	r0
    1668:	11 24       	eor	r1, r1
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1682:	80 91 df 03 	lds	r24, 0x03DF
    1686:	90 91 e0 03 	lds	r25, 0x03E0
    168a:	89 2b       	or	r24, r25
    168c:	29 f0       	breq	.+10     	; 0x1698 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    168e:	e0 91 df 03 	lds	r30, 0x03DF
    1692:	f0 91 e0 03 	lds	r31, 0x03E0
    1696:	09 95       	icall
}
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	bf 91       	pop	r27
    169e:	af 91       	pop	r26
    16a0:	9f 91       	pop	r25
    16a2:	8f 91       	pop	r24
    16a4:	7f 91       	pop	r23
    16a6:	6f 91       	pop	r22
    16a8:	5f 91       	pop	r21
    16aa:	4f 91       	pop	r20
    16ac:	3f 91       	pop	r19
    16ae:	2f 91       	pop	r18
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	af 93       	push	r26
    16ce:	bf 93       	push	r27
    16d0:	80 91 e5 03 	lds	r24, 0x03E5
    16d4:	90 91 e6 03 	lds	r25, 0x03E6
    16d8:	a0 91 e7 03 	lds	r26, 0x03E7
    16dc:	b0 91 e8 03 	lds	r27, 0x03E8
    16e0:	30 91 e9 03 	lds	r19, 0x03E9
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	a1 1d       	adc	r26, r1
    16e8:	b1 1d       	adc	r27, r1
    16ea:	23 2f       	mov	r18, r19
    16ec:	2d 5f       	subi	r18, 0xFD	; 253
    16ee:	2d 37       	cpi	r18, 0x7D	; 125
    16f0:	20 f0       	brcs	.+8      	; 0x16fa <__vector_16+0x40>
    16f2:	2d 57       	subi	r18, 0x7D	; 125
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	a1 1d       	adc	r26, r1
    16f8:	b1 1d       	adc	r27, r1
    16fa:	20 93 e9 03 	sts	0x03E9, r18
    16fe:	80 93 e5 03 	sts	0x03E5, r24
    1702:	90 93 e6 03 	sts	0x03E6, r25
    1706:	a0 93 e7 03 	sts	0x03E7, r26
    170a:	b0 93 e8 03 	sts	0x03E8, r27
    170e:	80 91 e1 03 	lds	r24, 0x03E1
    1712:	90 91 e2 03 	lds	r25, 0x03E2
    1716:	a0 91 e3 03 	lds	r26, 0x03E3
    171a:	b0 91 e4 03 	lds	r27, 0x03E4
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	a1 1d       	adc	r26, r1
    1722:	b1 1d       	adc	r27, r1
    1724:	80 93 e1 03 	sts	0x03E1, r24
    1728:	90 93 e2 03 	sts	0x03E2, r25
    172c:	a0 93 e3 03 	sts	0x03E3, r26
    1730:	b0 93 e4 03 	sts	0x03E4, r27
    1734:	bf 91       	pop	r27
    1736:	af 91       	pop	r26
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	3f 91       	pop	r19
    173e:	2f 91       	pop	r18
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <delay>:
    174a:	9b 01       	movw	r18, r22
    174c:	ac 01       	movw	r20, r24
    174e:	7f b7       	in	r23, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	80 91 e1 03 	lds	r24, 0x03E1
    1756:	90 91 e2 03 	lds	r25, 0x03E2
    175a:	a0 91 e3 03 	lds	r26, 0x03E3
    175e:	b0 91 e4 03 	lds	r27, 0x03E4
    1762:	66 b5       	in	r22, 0x26	; 38
    1764:	a8 9b       	sbis	0x15, 0	; 21
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <delay+0x28>
    1768:	6f 3f       	cpi	r22, 0xFF	; 255
    176a:	19 f0       	breq	.+6      	; 0x1772 <delay+0x28>
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	a1 1d       	adc	r26, r1
    1770:	b1 1d       	adc	r27, r1
    1772:	7f bf       	out	0x3f, r23	; 63
    1774:	ba 2f       	mov	r27, r26
    1776:	a9 2f       	mov	r26, r25
    1778:	98 2f       	mov	r25, r24
    177a:	88 27       	eor	r24, r24
    177c:	86 0f       	add	r24, r22
    177e:	91 1d       	adc	r25, r1
    1780:	a1 1d       	adc	r26, r1
    1782:	b1 1d       	adc	r27, r1
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	aa 1f       	adc	r26, r26
    178c:	bb 1f       	adc	r27, r27
    178e:	6a 95       	dec	r22
    1790:	d1 f7       	brne	.-12     	; 0x1786 <delay+0x3c>
    1792:	bc 01       	movw	r22, r24
    1794:	2d c0       	rjmp	.+90     	; 0x17f0 <delay+0xa6>
    1796:	ff b7       	in	r31, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	80 91 e1 03 	lds	r24, 0x03E1
    179e:	90 91 e2 03 	lds	r25, 0x03E2
    17a2:	a0 91 e3 03 	lds	r26, 0x03E3
    17a6:	b0 91 e4 03 	lds	r27, 0x03E4
    17aa:	e6 b5       	in	r30, 0x26	; 38
    17ac:	a8 9b       	sbis	0x15, 0	; 21
    17ae:	05 c0       	rjmp	.+10     	; 0x17ba <delay+0x70>
    17b0:	ef 3f       	cpi	r30, 0xFF	; 255
    17b2:	19 f0       	breq	.+6      	; 0x17ba <delay+0x70>
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	a1 1d       	adc	r26, r1
    17b8:	b1 1d       	adc	r27, r1
    17ba:	ff bf       	out	0x3f, r31	; 63
    17bc:	ba 2f       	mov	r27, r26
    17be:	a9 2f       	mov	r26, r25
    17c0:	98 2f       	mov	r25, r24
    17c2:	88 27       	eor	r24, r24
    17c4:	8e 0f       	add	r24, r30
    17c6:	91 1d       	adc	r25, r1
    17c8:	a1 1d       	adc	r26, r1
    17ca:	b1 1d       	adc	r27, r1
    17cc:	e2 e0       	ldi	r30, 0x02	; 2
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	aa 1f       	adc	r26, r26
    17d4:	bb 1f       	adc	r27, r27
    17d6:	ea 95       	dec	r30
    17d8:	d1 f7       	brne	.-12     	; 0x17ce <delay+0x84>
    17da:	86 1b       	sub	r24, r22
    17dc:	97 0b       	sbc	r25, r23
    17de:	88 5e       	subi	r24, 0xE8	; 232
    17e0:	93 40       	sbci	r25, 0x03	; 3
    17e2:	c8 f2       	brcs	.-78     	; 0x1796 <delay+0x4c>
    17e4:	21 50       	subi	r18, 0x01	; 1
    17e6:	30 40       	sbci	r19, 0x00	; 0
    17e8:	40 40       	sbci	r20, 0x00	; 0
    17ea:	50 40       	sbci	r21, 0x00	; 0
    17ec:	68 51       	subi	r22, 0x18	; 24
    17ee:	7c 4f       	sbci	r23, 0xFC	; 252
    17f0:	21 15       	cp	r18, r1
    17f2:	31 05       	cpc	r19, r1
    17f4:	41 05       	cpc	r20, r1
    17f6:	51 05       	cpc	r21, r1
    17f8:	71 f6       	brne	.-100    	; 0x1796 <delay+0x4c>
    17fa:	08 95       	ret

000017fc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    17fc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    17fe:	84 b5       	in	r24, 0x24	; 36
    1800:	82 60       	ori	r24, 0x02	; 2
    1802:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1804:	84 b5       	in	r24, 0x24	; 36
    1806:	81 60       	ori	r24, 0x01	; 1
    1808:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    180a:	85 b5       	in	r24, 0x25	; 37
    180c:	82 60       	ori	r24, 0x02	; 2
    180e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1810:	85 b5       	in	r24, 0x25	; 37
    1812:	81 60       	ori	r24, 0x01	; 1
    1814:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1816:	ee e6       	ldi	r30, 0x6E	; 110
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	81 60       	ori	r24, 0x01	; 1
    181e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1820:	e1 e8       	ldi	r30, 0x81	; 129
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1826:	80 81       	ld	r24, Z
    1828:	82 60       	ori	r24, 0x02	; 2
    182a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    182c:	80 81       	ld	r24, Z
    182e:	81 60       	ori	r24, 0x01	; 1
    1830:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1832:	e0 e8       	ldi	r30, 0x80	; 128
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	81 60       	ori	r24, 0x01	; 1
    183a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    183c:	e1 eb       	ldi	r30, 0xB1	; 177
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	84 60       	ori	r24, 0x04	; 4
    1844:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1846:	e0 eb       	ldi	r30, 0xB0	; 176
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	81 60       	ori	r24, 0x01	; 1
    184e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1850:	ea e7       	ldi	r30, 0x7A	; 122
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	84 60       	ori	r24, 0x04	; 4
    1858:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    185a:	80 81       	ld	r24, Z
    185c:	82 60       	ori	r24, 0x02	; 2
    185e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1860:	80 81       	ld	r24, Z
    1862:	81 60       	ori	r24, 0x01	; 1
    1864:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1866:	80 81       	ld	r24, Z
    1868:	80 68       	ori	r24, 0x80	; 128
    186a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    186c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1870:	08 95       	ret

00001872 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1876:	48 2f       	mov	r20, r24
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	ca 01       	movw	r24, r20
    187c:	8d 51       	subi	r24, 0x1D	; 29
    187e:	9b 4f       	sbci	r25, 0xFB	; 251
    1880:	fc 01       	movw	r30, r24
    1882:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
    1884:	41 53       	subi	r20, 0x31	; 49
    1886:	5b 4f       	sbci	r21, 0xFB	; 251
    1888:	fa 01       	movw	r30, r20
    188a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    188c:	88 23       	and	r24, r24
    188e:	69 f1       	breq	.+90     	; 0x18ea <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	fc 01       	movw	r30, r24
    1898:	ef 54       	subi	r30, 0x4F	; 79
    189a:	fb 4f       	sbci	r31, 0xFB	; 251
    189c:	a5 91       	lpm	r26, Z+
    189e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    18a0:	fc 01       	movw	r30, r24
    18a2:	e5 54       	subi	r30, 0x45	; 69
    18a4:	fb 4f       	sbci	r31, 0xFB	; 251
    18a6:	c5 91       	lpm	r28, Z+
    18a8:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    18aa:	66 23       	and	r22, r22
    18ac:	51 f4       	brne	.+20     	; 0x18c2 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    18ae:	2f b7       	in	r18, 0x3f	; 63
                cli();
    18b0:	f8 94       	cli
		*reg &= ~bit;
    18b2:	8c 91       	ld	r24, X
    18b4:	93 2f       	mov	r25, r19
    18b6:	90 95       	com	r25
    18b8:	89 23       	and	r24, r25
    18ba:	8c 93       	st	X, r24
		*out &= ~bit;
    18bc:	88 81       	ld	r24, Y
    18be:	89 23       	and	r24, r25
    18c0:	0b c0       	rjmp	.+22     	; 0x18d8 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    18c2:	62 30       	cpi	r22, 0x02	; 2
    18c4:	61 f4       	brne	.+24     	; 0x18de <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    18c6:	2f b7       	in	r18, 0x3f	; 63
                cli();
    18c8:	f8 94       	cli
		*reg &= ~bit;
    18ca:	8c 91       	ld	r24, X
    18cc:	93 2f       	mov	r25, r19
    18ce:	90 95       	com	r25
    18d0:	89 23       	and	r24, r25
    18d2:	8c 93       	st	X, r24
		*out |= bit;
    18d4:	88 81       	ld	r24, Y
    18d6:	83 2b       	or	r24, r19
    18d8:	88 83       	st	Y, r24
		SREG = oldSREG;
    18da:	2f bf       	out	0x3f, r18	; 63
    18dc:	06 c0       	rjmp	.+12     	; 0x18ea <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    18de:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18e0:	f8 94       	cli
		*reg |= bit;
    18e2:	8c 91       	ld	r24, X
    18e4:	83 2b       	or	r24, r19
    18e6:	8c 93       	st	X, r24
		SREG = oldSREG;
    18e8:	9f bf       	out	0x3f, r25	; 63
	}
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    18f0:	48 2f       	mov	r20, r24
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	ca 01       	movw	r24, r20
    18f6:	89 50       	subi	r24, 0x09	; 9
    18f8:	9b 4f       	sbci	r25, 0xFB	; 251
    18fa:	fc 01       	movw	r30, r24
    18fc:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    18fe:	ca 01       	movw	r24, r20
    1900:	8d 51       	subi	r24, 0x1D	; 29
    1902:	9b 4f       	sbci	r25, 0xFB	; 251
    1904:	fc 01       	movw	r30, r24
    1906:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
    1908:	41 53       	subi	r20, 0x31	; 49
    190a:	5b 4f       	sbci	r21, 0xFB	; 251
    190c:	fa 01       	movw	r30, r20
    190e:	34 91       	lpm	r19, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1910:	33 23       	and	r19, r19
    1912:	09 f4       	brne	.+2      	; 0x1916 <digitalWrite+0x26>
    1914:	40 c0       	rjmp	.+128    	; 0x1996 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1916:	22 23       	and	r18, r18
    1918:	51 f1       	breq	.+84     	; 0x196e <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    191a:	23 30       	cpi	r18, 0x03	; 3
    191c:	71 f0       	breq	.+28     	; 0x193a <digitalWrite+0x4a>
    191e:	24 30       	cpi	r18, 0x04	; 4
    1920:	28 f4       	brcc	.+10     	; 0x192c <digitalWrite+0x3c>
    1922:	21 30       	cpi	r18, 0x01	; 1
    1924:	a1 f0       	breq	.+40     	; 0x194e <digitalWrite+0x5e>
    1926:	22 30       	cpi	r18, 0x02	; 2
    1928:	11 f5       	brne	.+68     	; 0x196e <digitalWrite+0x7e>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <digitalWrite+0x64>
    192c:	26 30       	cpi	r18, 0x06	; 6
    192e:	b1 f0       	breq	.+44     	; 0x195c <digitalWrite+0x6c>
    1930:	27 30       	cpi	r18, 0x07	; 7
    1932:	c1 f0       	breq	.+48     	; 0x1964 <digitalWrite+0x74>
    1934:	24 30       	cpi	r18, 0x04	; 4
    1936:	d9 f4       	brne	.+54     	; 0x196e <digitalWrite+0x7e>
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    193a:	80 91 80 00 	lds	r24, 0x0080
    193e:	8f 77       	andi	r24, 0x7F	; 127
    1940:	03 c0       	rjmp	.+6      	; 0x1948 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1942:	80 91 80 00 	lds	r24, 0x0080
    1946:	8f 7d       	andi	r24, 0xDF	; 223
    1948:	80 93 80 00 	sts	0x0080, r24
    194c:	10 c0       	rjmp	.+32     	; 0x196e <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    194e:	84 b5       	in	r24, 0x24	; 36
    1950:	8f 77       	andi	r24, 0x7F	; 127
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1954:	84 b5       	in	r24, 0x24	; 36
    1956:	8f 7d       	andi	r24, 0xDF	; 223
    1958:	84 bd       	out	0x24, r24	; 36
    195a:	09 c0       	rjmp	.+18     	; 0x196e <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    195c:	80 91 b0 00 	lds	r24, 0x00B0
    1960:	8f 77       	andi	r24, 0x7F	; 127
    1962:	03 c0       	rjmp	.+6      	; 0x196a <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1964:	80 91 b0 00 	lds	r24, 0x00B0
    1968:	8f 7d       	andi	r24, 0xDF	; 223
    196a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    196e:	e3 2f       	mov	r30, r19
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	e5 54       	subi	r30, 0x45	; 69
    1978:	fb 4f       	sbci	r31, 0xFB	; 251
    197a:	a5 91       	lpm	r26, Z+
    197c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    197e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1980:	f8 94       	cli

	if (val == LOW) {
    1982:	66 23       	and	r22, r22
    1984:	21 f4       	brne	.+8      	; 0x198e <digitalWrite+0x9e>
		*out &= ~bit;
    1986:	8c 91       	ld	r24, X
    1988:	90 95       	com	r25
    198a:	89 23       	and	r24, r25
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    198e:	8c 91       	ld	r24, X
    1990:	89 2b       	or	r24, r25
    1992:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1994:	2f bf       	out	0x3f, r18	; 63
    1996:	08 95       	ret

00001998 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1998:	68 2f       	mov	r22, r24
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	cb 01       	movw	r24, r22
    199e:	89 50       	subi	r24, 0x09	; 9
    19a0:	9b 4f       	sbci	r25, 0xFB	; 251
    19a2:	fc 01       	movw	r30, r24
    19a4:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    19a6:	cb 01       	movw	r24, r22
    19a8:	8d 51       	subi	r24, 0x1D	; 29
    19aa:	9b 4f       	sbci	r25, 0xFB	; 251
    19ac:	fc 01       	movw	r30, r24
    19ae:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(pin);
    19b0:	61 53       	subi	r22, 0x31	; 49
    19b2:	7b 4f       	sbci	r23, 0xFB	; 251
    19b4:	fb 01       	movw	r30, r22
    19b6:	94 91       	lpm	r25, Z

	if (port == NOT_A_PIN) return LOW;
    19b8:	99 23       	and	r25, r25
    19ba:	19 f4       	brne	.+6      	; 0x19c2 <digitalRead+0x2a>
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	3c c0       	rjmp	.+120    	; 0x1a3a <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    19c2:	22 23       	and	r18, r18
    19c4:	51 f1       	breq	.+84     	; 0x1a1a <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    19c6:	23 30       	cpi	r18, 0x03	; 3
    19c8:	71 f0       	breq	.+28     	; 0x19e6 <digitalRead+0x4e>
    19ca:	24 30       	cpi	r18, 0x04	; 4
    19cc:	28 f4       	brcc	.+10     	; 0x19d8 <digitalRead+0x40>
    19ce:	21 30       	cpi	r18, 0x01	; 1
    19d0:	a1 f0       	breq	.+40     	; 0x19fa <digitalRead+0x62>
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	11 f5       	brne	.+68     	; 0x1a1a <digitalRead+0x82>
    19d6:	14 c0       	rjmp	.+40     	; 0x1a00 <digitalRead+0x68>
    19d8:	26 30       	cpi	r18, 0x06	; 6
    19da:	b1 f0       	breq	.+44     	; 0x1a08 <digitalRead+0x70>
    19dc:	27 30       	cpi	r18, 0x07	; 7
    19de:	c1 f0       	breq	.+48     	; 0x1a10 <digitalRead+0x78>
    19e0:	24 30       	cpi	r18, 0x04	; 4
    19e2:	d9 f4       	brne	.+54     	; 0x1a1a <digitalRead+0x82>
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    19e6:	80 91 80 00 	lds	r24, 0x0080
    19ea:	8f 77       	andi	r24, 0x7F	; 127
    19ec:	03 c0       	rjmp	.+6      	; 0x19f4 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    19ee:	80 91 80 00 	lds	r24, 0x0080
    19f2:	8f 7d       	andi	r24, 0xDF	; 223
    19f4:	80 93 80 00 	sts	0x0080, r24
    19f8:	10 c0       	rjmp	.+32     	; 0x1a1a <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    19fa:	84 b5       	in	r24, 0x24	; 36
    19fc:	8f 77       	andi	r24, 0x7F	; 127
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1a00:	84 b5       	in	r24, 0x24	; 36
    1a02:	8f 7d       	andi	r24, 0xDF	; 223
    1a04:	84 bd       	out	0x24, r24	; 36
    1a06:	09 c0       	rjmp	.+18     	; 0x1a1a <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1a08:	80 91 b0 00 	lds	r24, 0x00B0
    1a0c:	8f 77       	andi	r24, 0x7F	; 127
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1a10:	80 91 b0 00 	lds	r24, 0x00B0
    1a14:	8f 7d       	andi	r24, 0xDF	; 223
    1a16:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    1a1a:	89 2f       	mov	r24, r25
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	8b 53       	subi	r24, 0x3B	; 59
    1a24:	9b 4f       	sbci	r25, 0xFB	; 251
    1a26:	fc 01       	movw	r30, r24
    1a28:	a5 91       	lpm	r26, Z+
    1a2a:	b4 91       	lpm	r27, Z
    1a2c:	8c 91       	ld	r24, X
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	84 23       	and	r24, r20
    1a34:	11 f0       	breq	.+4      	; 0x1a3a <digitalRead+0xa2>
    1a36:	21 e0       	ldi	r18, 0x01	; 1
    1a38:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	08 95       	ret

00001a3e <_Z11serialEventv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    1a3e:	08 95       	ret

00001a40 <__vector_18>:
    1a40:	1f 92       	push	r1
    1a42:	0f 92       	push	r0
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	0f 92       	push	r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	2f 93       	push	r18
    1a4c:	3f 93       	push	r19
    1a4e:	4f 93       	push	r20
    1a50:	8f 93       	push	r24
    1a52:	9f 93       	push	r25
    1a54:	ef 93       	push	r30
    1a56:	ff 93       	push	r31
    1a58:	80 91 c0 00 	lds	r24, 0x00C0
    1a5c:	82 fd       	sbrc	r24, 2
    1a5e:	1d c0       	rjmp	.+58     	; 0x1a9a <__vector_18+0x5a>
    1a60:	40 91 c6 00 	lds	r20, 0x00C6
    1a64:	20 91 2a 04 	lds	r18, 0x042A
    1a68:	30 91 2b 04 	lds	r19, 0x042B
    1a6c:	2f 5f       	subi	r18, 0xFF	; 255
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	2f 73       	andi	r18, 0x3F	; 63
    1a72:	30 70       	andi	r19, 0x00	; 0
    1a74:	80 91 2c 04 	lds	r24, 0x042C
    1a78:	90 91 2d 04 	lds	r25, 0x042D
    1a7c:	28 17       	cp	r18, r24
    1a7e:	39 07       	cpc	r19, r25
    1a80:	71 f0       	breq	.+28     	; 0x1a9e <__vector_18+0x5e>
    1a82:	e0 91 2a 04 	lds	r30, 0x042A
    1a86:	f0 91 2b 04 	lds	r31, 0x042B
    1a8a:	e6 51       	subi	r30, 0x16	; 22
    1a8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a8e:	40 83       	st	Z, r20
    1a90:	30 93 2b 04 	sts	0x042B, r19
    1a94:	20 93 2a 04 	sts	0x042A, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <__vector_18+0x5e>
    1a9a:	80 91 c6 00 	lds	r24, 0x00C6
    1a9e:	ff 91       	pop	r31
    1aa0:	ef 91       	pop	r30
    1aa2:	9f 91       	pop	r25
    1aa4:	8f 91       	pop	r24
    1aa6:	4f 91       	pop	r20
    1aa8:	3f 91       	pop	r19
    1aaa:	2f 91       	pop	r18
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <_Z14serialEventRunv>:
    1ab6:	e0 91 7e 04 	lds	r30, 0x047E
    1aba:	f0 91 7f 04 	lds	r31, 0x047F
    1abe:	e0 5c       	subi	r30, 0xC0	; 192
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	81 91       	ld	r24, Z+
    1ac4:	91 91       	ld	r25, Z+
    1ac6:	20 81       	ld	r18, Z
    1ac8:	31 81       	ldd	r19, Z+1	; 0x01
    1aca:	82 1b       	sub	r24, r18
    1acc:	93 0b       	sbc	r25, r19
    1ace:	8f 73       	andi	r24, 0x3F	; 63
    1ad0:	90 70       	andi	r25, 0x00	; 0
    1ad2:	89 2b       	or	r24, r25
    1ad4:	11 f0       	breq	.+4      	; 0x1ada <_Z14serialEventRunv+0x24>
    1ad6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_Z11serialEventv>
    1ada:	08 95       	ret

00001adc <__vector_19>:
    1adc:	1f 92       	push	r1
    1ade:	0f 92       	push	r0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	2f 93       	push	r18
    1ae8:	3f 93       	push	r19
    1aea:	8f 93       	push	r24
    1aec:	9f 93       	push	r25
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	20 91 6e 04 	lds	r18, 0x046E
    1af6:	30 91 6f 04 	lds	r19, 0x046F
    1afa:	80 91 70 04 	lds	r24, 0x0470
    1afe:	90 91 71 04 	lds	r25, 0x0471
    1b02:	28 17       	cp	r18, r24
    1b04:	39 07       	cpc	r19, r25
    1b06:	31 f4       	brne	.+12     	; 0x1b14 <__vector_19+0x38>
    1b08:	80 91 c1 00 	lds	r24, 0x00C1
    1b0c:	8f 7d       	andi	r24, 0xDF	; 223
    1b0e:	80 93 c1 00 	sts	0x00C1, r24
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <__vector_19+0x60>
    1b14:	e0 91 70 04 	lds	r30, 0x0470
    1b18:	f0 91 71 04 	lds	r31, 0x0471
    1b1c:	e2 5d       	subi	r30, 0xD2	; 210
    1b1e:	fb 4f       	sbci	r31, 0xFB	; 251
    1b20:	20 81       	ld	r18, Z
    1b22:	80 91 70 04 	lds	r24, 0x0470
    1b26:	90 91 71 04 	lds	r25, 0x0471
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	8f 73       	andi	r24, 0x3F	; 63
    1b2e:	90 70       	andi	r25, 0x00	; 0
    1b30:	90 93 71 04 	sts	0x0471, r25
    1b34:	80 93 70 04 	sts	0x0470, r24
    1b38:	20 93 c6 00 	sts	0x00C6, r18
    1b3c:	ff 91       	pop	r31
    1b3e:	ef 91       	pop	r30
    1b40:	9f 91       	pop	r25
    1b42:	8f 91       	pop	r24
    1b44:	3f 91       	pop	r19
    1b46:	2f 91       	pop	r18
    1b48:	0f 90       	pop	r0
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	0f 90       	pop	r0
    1b4e:	1f 90       	pop	r1
    1b50:	18 95       	reti

00001b52 <_ZN14HardwareSerial5beginEm>:
    1b52:	af 92       	push	r10
    1b54:	bf 92       	push	r11
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
    1b66:	7a 01       	movw	r14, r20
    1b68:	8b 01       	movw	r16, r22
    1b6a:	dd 24       	eor	r13, r13
    1b6c:	40 30       	cpi	r20, 0x00	; 0
    1b6e:	81 ee       	ldi	r24, 0xE1	; 225
    1b70:	58 07       	cpc	r21, r24
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	68 07       	cpc	r22, r24
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	78 07       	cpc	r23, r24
    1b7a:	11 f0       	breq	.+4      	; 0x1b80 <_ZN14HardwareSerial5beginEm+0x2e>
    1b7c:	dd 24       	eor	r13, r13
    1b7e:	d3 94       	inc	r13
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	a9 2e       	mov	r10, r25
    1b84:	b1 2c       	mov	r11, r1
    1b86:	ec 89       	ldd	r30, Y+20	; 0x14
    1b88:	fd 89       	ldd	r31, Y+21	; 0x15
    1b8a:	dd 20       	and	r13, r13
    1b8c:	69 f0       	breq	.+26     	; 0x1ba8 <_ZN14HardwareSerial5beginEm+0x56>
    1b8e:	c5 01       	movw	r24, r10
    1b90:	08 a0       	ldd	r0, Y+32	; 0x20
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <_ZN14HardwareSerial5beginEm+0x46>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <_ZN14HardwareSerial5beginEm+0x42>
    1b9c:	80 83       	st	Z, r24
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	79 e0       	ldi	r23, 0x09	; 9
    1ba2:	8d e3       	ldi	r24, 0x3D	; 61
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	05 c0       	rjmp	.+10     	; 0x1bb2 <_ZN14HardwareSerial5beginEm+0x60>
    1ba8:	10 82       	st	Z, r1
    1baa:	60 e8       	ldi	r22, 0x80	; 128
    1bac:	74 e8       	ldi	r23, 0x84	; 132
    1bae:	8e e1       	ldi	r24, 0x1E	; 30
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a8 01       	movw	r20, r16
    1bb4:	97 01       	movw	r18, r14
    1bb6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__udivmodsi4>
    1bba:	21 50       	subi	r18, 0x01	; 1
    1bbc:	30 40       	sbci	r19, 0x00	; 0
    1bbe:	40 40       	sbci	r20, 0x00	; 0
    1bc0:	50 40       	sbci	r21, 0x00	; 0
    1bc2:	56 95       	lsr	r21
    1bc4:	47 95       	ror	r20
    1bc6:	37 95       	ror	r19
    1bc8:	27 95       	ror	r18
    1bca:	80 e1       	ldi	r24, 0x10	; 16
    1bcc:	20 30       	cpi	r18, 0x00	; 0
    1bce:	38 07       	cpc	r19, r24
    1bd0:	20 f0       	brcs	.+8      	; 0x1bda <_ZN14HardwareSerial5beginEm+0x88>
    1bd2:	dd 20       	and	r13, r13
    1bd4:	11 f0       	breq	.+4      	; 0x1bda <_ZN14HardwareSerial5beginEm+0x88>
    1bd6:	dd 24       	eor	r13, r13
    1bd8:	d6 cf       	rjmp	.-84     	; 0x1b86 <_ZN14HardwareSerial5beginEm+0x34>
    1bda:	e8 89       	ldd	r30, Y+16	; 0x10
    1bdc:	f9 89       	ldd	r31, Y+17	; 0x11
    1bde:	30 83       	st	Z, r19
    1be0:	ea 89       	ldd	r30, Y+18	; 0x12
    1be2:	fb 89       	ldd	r31, Y+19	; 0x13
    1be4:	20 83       	st	Z, r18
    1be6:	19 a2       	std	Y+33, r1	; 0x21
    1be8:	ee 89       	ldd	r30, Y+22	; 0x16
    1bea:	ff 89       	ldd	r31, Y+23	; 0x17
    1bec:	40 81       	ld	r20, Z
    1bee:	21 e0       	ldi	r18, 0x01	; 1
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <_ZN14HardwareSerial5beginEm+0xaa>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <_ZN14HardwareSerial5beginEm+0xa6>
    1c00:	48 2b       	or	r20, r24
    1c02:	40 83       	st	Z, r20
    1c04:	ee 89       	ldd	r30, Y+22	; 0x16
    1c06:	ff 89       	ldd	r31, Y+23	; 0x17
    1c08:	40 81       	ld	r20, Z
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <_ZN14HardwareSerial5beginEm+0xc2>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <_ZN14HardwareSerial5beginEm+0xbe>
    1c18:	48 2b       	or	r20, r24
    1c1a:	40 83       	st	Z, r20
    1c1c:	ee 89       	ldd	r30, Y+22	; 0x16
    1c1e:	ff 89       	ldd	r31, Y+23	; 0x17
    1c20:	40 81       	ld	r20, Z
    1c22:	c9 01       	movw	r24, r18
    1c24:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <_ZN14HardwareSerial5beginEm+0xda>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <_ZN14HardwareSerial5beginEm+0xd6>
    1c30:	48 2b       	or	r20, r24
    1c32:	40 83       	st	Z, r20
    1c34:	ee 89       	ldd	r30, Y+22	; 0x16
    1c36:	ff 89       	ldd	r31, Y+23	; 0x17
    1c38:	80 81       	ld	r24, Z
    1c3a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <_ZN14HardwareSerial5beginEm+0xf0>
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <_ZN14HardwareSerial5beginEm+0xec>
    1c46:	20 95       	com	r18
    1c48:	28 23       	and	r18, r24
    1c4a:	20 83       	st	Z, r18
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	df 90       	pop	r13
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	08 95       	ret

00001c60 <_ZN14HardwareSerial9availableEv>:
    1c60:	dc 01       	movw	r26, r24
    1c62:	1c 96       	adiw	r26, 0x0c	; 12
    1c64:	ed 91       	ld	r30, X+
    1c66:	fc 91       	ld	r31, X
    1c68:	1d 97       	sbiw	r26, 0x0d	; 13
    1c6a:	e0 5c       	subi	r30, 0xC0	; 192
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	21 91       	ld	r18, Z+
    1c70:	31 91       	ld	r19, Z+
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	28 1b       	sub	r18, r24
    1c78:	39 0b       	sbc	r19, r25
    1c7a:	2f 73       	andi	r18, 0x3F	; 63
    1c7c:	30 70       	andi	r19, 0x00	; 0
    1c7e:	c9 01       	movw	r24, r18
    1c80:	08 95       	ret

00001c82 <_ZN14HardwareSerial4peekEv>:
    1c82:	dc 01       	movw	r26, r24
    1c84:	1c 96       	adiw	r26, 0x0c	; 12
    1c86:	ed 91       	ld	r30, X+
    1c88:	fc 91       	ld	r31, X
    1c8a:	1d 97       	sbiw	r26, 0x0d	; 13
    1c8c:	e0 5c       	subi	r30, 0xC0	; 192
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	20 81       	ld	r18, Z
    1c92:	31 81       	ldd	r19, Z+1	; 0x01
    1c94:	e0 54       	subi	r30, 0x40	; 64
    1c96:	f0 40       	sbci	r31, 0x00	; 0
    1c98:	df 01       	movw	r26, r30
    1c9a:	ae 5b       	subi	r26, 0xBE	; 190
    1c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c9e:	8d 91       	ld	r24, X+
    1ca0:	9c 91       	ld	r25, X
    1ca2:	11 97       	sbiw	r26, 0x01	; 1
    1ca4:	28 17       	cp	r18, r24
    1ca6:	39 07       	cpc	r19, r25
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <_ZN14HardwareSerial4peekEv+0x2e>
    1caa:	2f ef       	ldi	r18, 0xFF	; 255
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <_ZN14HardwareSerial4peekEv+0x3c>
    1cb0:	8d 91       	ld	r24, X+
    1cb2:	9c 91       	ld	r25, X
    1cb4:	e8 0f       	add	r30, r24
    1cb6:	f9 1f       	adc	r31, r25
    1cb8:	80 81       	ld	r24, Z
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	c9 01       	movw	r24, r18
    1cc0:	08 95       	ret

00001cc2 <_ZN14HardwareSerial4readEv>:
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	1c 96       	adiw	r26, 0x0c	; 12
    1cc6:	ed 91       	ld	r30, X+
    1cc8:	fc 91       	ld	r31, X
    1cca:	1d 97       	sbiw	r26, 0x0d	; 13
    1ccc:	e0 5c       	subi	r30, 0xC0	; 192
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	20 81       	ld	r18, Z
    1cd2:	31 81       	ldd	r19, Z+1	; 0x01
    1cd4:	e0 54       	subi	r30, 0x40	; 64
    1cd6:	f0 40       	sbci	r31, 0x00	; 0
    1cd8:	df 01       	movw	r26, r30
    1cda:	ae 5b       	subi	r26, 0xBE	; 190
    1cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cde:	8d 91       	ld	r24, X+
    1ce0:	9c 91       	ld	r25, X
    1ce2:	11 97       	sbiw	r26, 0x01	; 1
    1ce4:	28 17       	cp	r18, r24
    1ce6:	39 07       	cpc	r19, r25
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <_ZN14HardwareSerial4readEv+0x2e>
    1cea:	2f ef       	ldi	r18, 0xFF	; 255
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	10 c0       	rjmp	.+32     	; 0x1d10 <_ZN14HardwareSerial4readEv+0x4e>
    1cf0:	8d 91       	ld	r24, X+
    1cf2:	9c 91       	ld	r25, X
    1cf4:	11 97       	sbiw	r26, 0x01	; 1
    1cf6:	e8 0f       	add	r30, r24
    1cf8:	f9 1f       	adc	r31, r25
    1cfa:	20 81       	ld	r18, Z
    1cfc:	8d 91       	ld	r24, X+
    1cfe:	9c 91       	ld	r25, X
    1d00:	11 97       	sbiw	r26, 0x01	; 1
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	8f 73       	andi	r24, 0x3F	; 63
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	11 96       	adiw	r26, 0x01	; 1
    1d0a:	9c 93       	st	X, r25
    1d0c:	8e 93       	st	-X, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	c9 01       	movw	r24, r18
    1d12:	08 95       	ret

00001d14 <_ZN14HardwareSerial5flushEv>:
    1d14:	dc 01       	movw	r26, r24
    1d16:	91 96       	adiw	r26, 0x21	; 33
    1d18:	8c 91       	ld	r24, X
    1d1a:	91 97       	sbiw	r26, 0x21	; 33
    1d1c:	88 23       	and	r24, r24
    1d1e:	39 f0       	breq	.+14     	; 0x1d2e <_ZN14HardwareSerial5flushEv+0x1a>
    1d20:	54 96       	adiw	r26, 0x14	; 20
    1d22:	ed 91       	ld	r30, X+
    1d24:	fc 91       	ld	r31, X
    1d26:	55 97       	sbiw	r26, 0x15	; 21
    1d28:	80 81       	ld	r24, Z
    1d2a:	86 ff       	sbrs	r24, 6
    1d2c:	f9 cf       	rjmp	.-14     	; 0x1d20 <_ZN14HardwareSerial5flushEv+0xc>
    1d2e:	91 96       	adiw	r26, 0x21	; 33
    1d30:	1c 92       	st	X, r1
    1d32:	08 95       	ret

00001d34 <_ZN14HardwareSerial5writeEh>:
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	ec 01       	movw	r28, r24
    1d3a:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d3c:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d3e:	e0 5c       	subi	r30, 0xC0	; 192
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	20 81       	ld	r18, Z
    1d44:	31 81       	ldd	r19, Z+1	; 0x01
    1d46:	e0 54       	subi	r30, 0x40	; 64
    1d48:	f0 40       	sbci	r31, 0x00	; 0
    1d4a:	2f 5f       	subi	r18, 0xFF	; 255
    1d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4e:	2f 73       	andi	r18, 0x3F	; 63
    1d50:	30 70       	andi	r19, 0x00	; 0
    1d52:	df 01       	movw	r26, r30
    1d54:	ae 5b       	subi	r26, 0xBE	; 190
    1d56:	bf 4f       	sbci	r27, 0xFF	; 255
    1d58:	8d 91       	ld	r24, X+
    1d5a:	9c 91       	ld	r25, X
    1d5c:	11 97       	sbiw	r26, 0x01	; 1
    1d5e:	28 17       	cp	r18, r24
    1d60:	39 07       	cpc	r19, r25
    1d62:	d1 f3       	breq	.-12     	; 0x1d58 <_ZN14HardwareSerial5writeEh+0x24>
    1d64:	e0 5c       	subi	r30, 0xC0	; 192
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	91 81       	ldd	r25, Z+1	; 0x01
    1d6c:	e0 54       	subi	r30, 0x40	; 64
    1d6e:	f0 40       	sbci	r31, 0x00	; 0
    1d70:	e8 0f       	add	r30, r24
    1d72:	f9 1f       	adc	r31, r25
    1d74:	60 83       	st	Z, r22
    1d76:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d78:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d7a:	e0 5c       	subi	r30, 0xC0	; 192
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	31 83       	std	Z+1, r19	; 0x01
    1d80:	20 83       	st	Z, r18
    1d82:	ee 89       	ldd	r30, Y+22	; 0x16
    1d84:	ff 89       	ldd	r31, Y+23	; 0x17
    1d86:	20 81       	ld	r18, Z
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <_ZN14HardwareSerial5writeEh+0x60>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <_ZN14HardwareSerial5writeEh+0x5c>
    1d98:	28 2b       	or	r18, r24
    1d9a:	20 83       	st	Z, r18
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	89 a3       	std	Y+33, r24	; 0x21
    1da0:	ec 89       	ldd	r30, Y+20	; 0x14
    1da2:	fd 89       	ldd	r31, Y+21	; 0x15
    1da4:	80 81       	ld	r24, Z
    1da6:	80 64       	ori	r24, 0x40	; 64
    1da8:	80 83       	st	Z, r24
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <_GLOBAL__I_rx_buffer>:
    1db4:	10 92 75 04 	sts	0x0475, r1
    1db8:	10 92 74 04 	sts	0x0474, r1
    1dbc:	88 ee       	ldi	r24, 0xE8	; 232
    1dbe:	93 e0       	ldi	r25, 0x03	; 3
    1dc0:	a0 e0       	ldi	r26, 0x00	; 0
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	80 93 76 04 	sts	0x0476, r24
    1dc8:	90 93 77 04 	sts	0x0477, r25
    1dcc:	a0 93 78 04 	sts	0x0478, r26
    1dd0:	b0 93 79 04 	sts	0x0479, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1dd4:	88 e9       	ldi	r24, 0x98	; 152
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	90 93 73 04 	sts	0x0473, r25
    1ddc:	80 93 72 04 	sts	0x0472, r24
{
  _rx_buffer = rx_buffer;
    1de0:	8a ee       	ldi	r24, 0xEA	; 234
    1de2:	93 e0       	ldi	r25, 0x03	; 3
    1de4:	90 93 7f 04 	sts	0x047F, r25
    1de8:	80 93 7e 04 	sts	0x047E, r24
  _tx_buffer = tx_buffer;
    1dec:	8e e2       	ldi	r24, 0x2E	; 46
    1dee:	94 e0       	ldi	r25, 0x04	; 4
    1df0:	90 93 81 04 	sts	0x0481, r25
    1df4:	80 93 80 04 	sts	0x0480, r24
  _ubrrh = ubrrh;
    1df8:	85 ec       	ldi	r24, 0xC5	; 197
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	90 93 83 04 	sts	0x0483, r25
    1e00:	80 93 82 04 	sts	0x0482, r24
  _ubrrl = ubrrl;
    1e04:	84 ec       	ldi	r24, 0xC4	; 196
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	90 93 85 04 	sts	0x0485, r25
    1e0c:	80 93 84 04 	sts	0x0484, r24
  _ucsra = ucsra;
    1e10:	80 ec       	ldi	r24, 0xC0	; 192
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	90 93 87 04 	sts	0x0487, r25
    1e18:	80 93 86 04 	sts	0x0486, r24
  _ucsrb = ucsrb;
    1e1c:	81 ec       	ldi	r24, 0xC1	; 193
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	90 93 89 04 	sts	0x0489, r25
    1e24:	80 93 88 04 	sts	0x0488, r24
  _ucsrc = ucsrc;
    1e28:	82 ec       	ldi	r24, 0xC2	; 194
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	90 93 8b 04 	sts	0x048B, r25
    1e30:	80 93 8a 04 	sts	0x048A, r24
  _udr = udr;
    1e34:	86 ec       	ldi	r24, 0xC6	; 198
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	90 93 8d 04 	sts	0x048D, r25
    1e3c:	80 93 8c 04 	sts	0x048C, r24
  _rxen = rxen;
    1e40:	84 e0       	ldi	r24, 0x04	; 4
    1e42:	80 93 8e 04 	sts	0x048E, r24
  _txen = txen;
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	80 93 8f 04 	sts	0x048F, r24
  _rxcie = rxcie;
    1e4c:	87 e0       	ldi	r24, 0x07	; 7
    1e4e:	80 93 90 04 	sts	0x0490, r24
  _udrie = udrie;
    1e52:	85 e0       	ldi	r24, 0x05	; 5
    1e54:	80 93 91 04 	sts	0x0491, r24
  _u2x = u2x;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	80 93 92 04 	sts	0x0492, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1e5e:	08 95       	ret

00001e60 <main>:
#include <Arduino.h>

int main(void)
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
{
	init();
    1e64:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1e68:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1e6c:	cb e5       	ldi	r28, 0x5B	; 91
    1e6e:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1e70:	0e 94 95 0a 	call	0x152a	; 0x152a <loop>
		if (serialEventRun) serialEventRun();
    1e74:	20 97       	sbiw	r28, 0x00	; 0
    1e76:	e1 f3       	breq	.-8      	; 0x1e70 <main+0x10>
    1e78:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <_Z14serialEventRunv>
    1e7c:	f9 cf       	rjmp	.-14     	; 0x1e70 <main+0x10>

00001e7e <_ZN5Print5writeEPKhj>:
size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  return n;
}
    1e7e:	cf 92       	push	r12
    1e80:	df 92       	push	r13
    1e82:	ef 92       	push	r14
    1e84:	ff 92       	push	r15
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	7c 01       	movw	r14, r24
    1e90:	6b 01       	movw	r12, r22
    1e92:	8a 01       	movw	r16, r20
    1e94:	c0 e0       	ldi	r28, 0x00	; 0
    1e96:	d0 e0       	ldi	r29, 0x00	; 0
    1e98:	0f c0       	rjmp	.+30     	; 0x1eb8 <_ZN5Print5writeEPKhj+0x3a>
    1e9a:	d6 01       	movw	r26, r12
    1e9c:	6d 91       	ld	r22, X+
    1e9e:	6d 01       	movw	r12, r26
    1ea0:	d7 01       	movw	r26, r14
    1ea2:	ed 91       	ld	r30, X+
    1ea4:	fc 91       	ld	r31, X
    1ea6:	01 90       	ld	r0, Z+
    1ea8:	f0 81       	ld	r31, Z
    1eaa:	e0 2d       	mov	r30, r0
    1eac:	c7 01       	movw	r24, r14
    1eae:	09 95       	icall
    1eb0:	c8 0f       	add	r28, r24
    1eb2:	d9 1f       	adc	r29, r25
    1eb4:	01 50       	subi	r16, 0x01	; 1
    1eb6:	10 40       	sbci	r17, 0x00	; 0
    1eb8:	01 15       	cp	r16, r1
    1eba:	11 05       	cpc	r17, r1
    1ebc:	71 f7       	brne	.-36     	; 0x1e9a <_ZN5Print5writeEPKhj+0x1c>
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	08 95       	ret

00001ed2 <_ZN5Print5printEPK19__FlashStringHelper>:
    1ed2:	ef 92       	push	r14
    1ed4:	ff 92       	push	r15
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	7c 01       	movw	r14, r24
    1ee0:	8b 01       	movw	r16, r22
    1ee2:	c0 e0       	ldi	r28, 0x00	; 0
    1ee4:	d0 e0       	ldi	r29, 0x00	; 0
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	0f 5f       	subi	r16, 0xFF	; 255
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	64 91       	lpm	r22, Z
    1eee:	66 23       	and	r22, r22
    1ef0:	59 f0       	breq	.+22     	; 0x1f08 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    1ef2:	d7 01       	movw	r26, r14
    1ef4:	ed 91       	ld	r30, X+
    1ef6:	fc 91       	ld	r31, X
    1ef8:	01 90       	ld	r0, Z+
    1efa:	f0 81       	ld	r31, Z
    1efc:	e0 2d       	mov	r30, r0
    1efe:	c7 01       	movw	r24, r14
    1f00:	09 95       	icall
    1f02:	c8 0f       	add	r28, r24
    1f04:	d9 1f       	adc	r29, r25
    1f06:	ef cf       	rjmp	.-34     	; 0x1ee6 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1f08:	ce 01       	movw	r24, r28
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	ff 90       	pop	r15
    1f14:	ef 90       	pop	r14
    1f16:	08 95       	ret

00001f18 <_ZN5Print7printlnEv>:
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	8c 01       	movw	r16, r24
    1f22:	dc 01       	movw	r26, r24
    1f24:	ed 91       	ld	r30, X+
    1f26:	fc 91       	ld	r31, X
    1f28:	01 90       	ld	r0, Z+
    1f2a:	f0 81       	ld	r31, Z
    1f2c:	e0 2d       	mov	r30, r0
    1f2e:	6d e0       	ldi	r22, 0x0D	; 13
    1f30:	09 95       	icall
    1f32:	7c 01       	movw	r14, r24
    1f34:	d8 01       	movw	r26, r16
    1f36:	ed 91       	ld	r30, X+
    1f38:	fc 91       	ld	r31, X
    1f3a:	01 90       	ld	r0, Z+
    1f3c:	f0 81       	ld	r31, Z
    1f3e:	e0 2d       	mov	r30, r0
    1f40:	c8 01       	movw	r24, r16
    1f42:	6a e0       	ldi	r22, 0x0A	; 10
    1f44:	09 95       	icall
    1f46:	9c 01       	movw	r18, r24
    1f48:	2e 0d       	add	r18, r14
    1f4a:	3f 1d       	adc	r19, r15
    1f4c:	c9 01       	movw	r24, r18
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	ff 90       	pop	r15
    1f54:	ef 90       	pop	r14
    1f56:	08 95       	ret

00001f58 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	7c 01       	movw	r14, r24
    1f62:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN5Print5printEPK19__FlashStringHelper>
    1f66:	8c 01       	movw	r16, r24
    1f68:	c7 01       	movw	r24, r14
    1f6a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN5Print7printlnEv>
    1f6e:	9c 01       	movw	r18, r24
    1f70:	20 0f       	add	r18, r16
    1f72:	31 1f       	adc	r19, r17
    1f74:	c9 01       	movw	r24, r18
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	08 95       	ret

00001f80 <_ZN5Print5writeEPKc>:
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	ec 01       	movw	r28, r24
    1f86:	61 15       	cp	r22, r1
    1f88:	71 05       	cpc	r23, r1
    1f8a:	19 f4       	brne	.+6      	; 0x1f92 <_ZN5Print5writeEPKc+0x12>
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <_ZN5Print5writeEPKc+0x30>
    1f92:	db 01       	movw	r26, r22
    1f94:	0d 90       	ld	r0, X+
    1f96:	00 20       	and	r0, r0
    1f98:	e9 f7       	brne	.-6      	; 0x1f94 <_ZN5Print5writeEPKc+0x14>
    1f9a:	11 97       	sbiw	r26, 0x01	; 1
    1f9c:	a6 1b       	sub	r26, r22
    1f9e:	b7 0b       	sbc	r27, r23
    1fa0:	e8 81       	ld	r30, Y
    1fa2:	f9 81       	ldd	r31, Y+1	; 0x01
    1fa4:	02 80       	ldd	r0, Z+2	; 0x02
    1fa6:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa8:	e0 2d       	mov	r30, r0
    1faa:	ad 01       	movw	r20, r26
    1fac:	09 95       	icall
    1fae:	9c 01       	movw	r18, r24
    1fb0:	c9 01       	movw	r24, r18
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	08 95       	ret

00001fb8 <_ZN5Print11printNumberEmh>:
    1fb8:	4f 92       	push	r4
    1fba:	5f 92       	push	r5
    1fbc:	7f 92       	push	r7
    1fbe:	8f 92       	push	r8
    1fc0:	9f 92       	push	r9
    1fc2:	af 92       	push	r10
    1fc4:	bf 92       	push	r11
    1fc6:	cf 92       	push	r12
    1fc8:	df 92       	push	r13
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
    1fce:	0f 93       	push	r16
    1fd0:	1f 93       	push	r17
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	a1 97       	sbiw	r28, 0x21	; 33
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	2c 01       	movw	r4, r24
    1fe8:	74 2e       	mov	r7, r20
    1fea:	cb 01       	movw	r24, r22
    1fec:	22 30       	cpi	r18, 0x02	; 2
    1fee:	08 f4       	brcc	.+2      	; 0x1ff2 <_ZN5Print11printNumberEmh+0x3a>
    1ff0:	2a e0       	ldi	r18, 0x0A	; 10
    1ff2:	19 a2       	std	Y+33, r1	; 0x21
    1ff4:	31 e2       	ldi	r19, 0x21	; 33
    1ff6:	c3 2e       	mov	r12, r19
    1ff8:	d1 2c       	mov	r13, r1
    1ffa:	cc 0e       	add	r12, r28
    1ffc:	dd 1e       	adc	r13, r29
    1ffe:	82 2e       	mov	r8, r18
    2000:	99 24       	eor	r9, r9
    2002:	aa 24       	eor	r10, r10
    2004:	bb 24       	eor	r11, r11
    2006:	67 2d       	mov	r22, r7
    2008:	75 2f       	mov	r23, r21
    200a:	a5 01       	movw	r20, r10
    200c:	94 01       	movw	r18, r8
    200e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__udivmodsi4>
    2012:	79 01       	movw	r14, r18
    2014:	8a 01       	movw	r16, r20
    2016:	c8 01       	movw	r24, r16
    2018:	b7 01       	movw	r22, r14
    201a:	a5 01       	movw	r20, r10
    201c:	94 01       	movw	r18, r8
    201e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__mulsi3>
    2022:	47 2d       	mov	r20, r7
    2024:	46 1b       	sub	r20, r22
    2026:	08 94       	sec
    2028:	c1 08       	sbc	r12, r1
    202a:	d1 08       	sbc	r13, r1
    202c:	4a 30       	cpi	r20, 0x0A	; 10
    202e:	14 f4       	brge	.+4      	; 0x2034 <_ZN5Print11printNumberEmh+0x7c>
    2030:	40 5d       	subi	r20, 0xD0	; 208
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <_ZN5Print11printNumberEmh+0x7e>
    2034:	49 5c       	subi	r20, 0xC9	; 201
    2036:	f6 01       	movw	r30, r12
    2038:	40 83       	st	Z, r20
    203a:	e1 14       	cp	r14, r1
    203c:	f1 04       	cpc	r15, r1
    203e:	01 05       	cpc	r16, r1
    2040:	11 05       	cpc	r17, r1
    2042:	21 f0       	breq	.+8      	; 0x204c <_ZN5Print11printNumberEmh+0x94>
    2044:	7e 2c       	mov	r7, r14
    2046:	5f 2d       	mov	r21, r15
    2048:	c8 01       	movw	r24, r16
    204a:	dd cf       	rjmp	.-70     	; 0x2006 <_ZN5Print11printNumberEmh+0x4e>
    204c:	c2 01       	movw	r24, r4
    204e:	b6 01       	movw	r22, r12
    2050:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN5Print5writeEPKc>
    2054:	a1 96       	adiw	r28, 0x21	; 33
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	bf 90       	pop	r11
    2072:	af 90       	pop	r10
    2074:	9f 90       	pop	r9
    2076:	8f 90       	pop	r8
    2078:	7f 90       	pop	r7
    207a:	5f 90       	pop	r5
    207c:	4f 90       	pop	r4
    207e:	08 95       	ret

00002080 <_ZN5Print5printEmi>:
    2080:	dc 01       	movw	r26, r24
    2082:	21 15       	cp	r18, r1
    2084:	31 05       	cpc	r19, r1
    2086:	41 f4       	brne	.+16     	; 0x2098 <_ZN5Print5printEmi+0x18>
    2088:	ed 91       	ld	r30, X+
    208a:	fc 91       	ld	r31, X
    208c:	01 90       	ld	r0, Z+
    208e:	f0 81       	ld	r31, Z
    2090:	e0 2d       	mov	r30, r0
    2092:	64 2f       	mov	r22, r20
    2094:	09 95       	icall
    2096:	08 95       	ret
    2098:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN5Print11printNumberEmh>
    209c:	08 95       	ret

0000209e <_ZN5Print5printEhi>:
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	9a 01       	movw	r18, r20
    20a8:	e6 2e       	mov	r14, r22
    20aa:	ff 24       	eor	r15, r15
    20ac:	00 e0       	ldi	r16, 0x00	; 0
    20ae:	10 e0       	ldi	r17, 0x00	; 0
    20b0:	b8 01       	movw	r22, r16
    20b2:	a7 01       	movw	r20, r14
    20b4:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN5Print5printEmi>
    20b8:	1f 91       	pop	r17
    20ba:	0f 91       	pop	r16
    20bc:	ff 90       	pop	r15
    20be:	ef 90       	pop	r14
    20c0:	08 95       	ret

000020c2 <_ZN5Print7printlnEhi>:
    20c2:	cf 92       	push	r12
    20c4:	df 92       	push	r13
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	6c 01       	movw	r12, r24
    20d0:	e6 2e       	mov	r14, r22
    20d2:	9a 01       	movw	r18, r20
    20d4:	ff 24       	eor	r15, r15
    20d6:	00 e0       	ldi	r16, 0x00	; 0
    20d8:	10 e0       	ldi	r17, 0x00	; 0
    20da:	b8 01       	movw	r22, r16
    20dc:	a7 01       	movw	r20, r14
    20de:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN5Print5printEmi>
    20e2:	8c 01       	movw	r16, r24
    20e4:	c6 01       	movw	r24, r12
    20e6:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN5Print7printlnEv>
    20ea:	08 0f       	add	r16, r24
    20ec:	19 1f       	adc	r17, r25
    20ee:	c8 01       	movw	r24, r16
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	df 90       	pop	r13
    20fa:	cf 90       	pop	r12
    20fc:	08 95       	ret

000020fe <_ZN5Print5printEli>:
    20fe:	cf 92       	push	r12
    2100:	df 92       	push	r13
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	1f 93       	push	r17
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	ec 01       	movw	r28, r24
    2110:	6a 01       	movw	r12, r20
    2112:	7b 01       	movw	r14, r22
    2114:	21 15       	cp	r18, r1
    2116:	31 05       	cpc	r19, r1
    2118:	41 f4       	brne	.+16     	; 0x212a <_ZN5Print5printEli+0x2c>
    211a:	e8 81       	ld	r30, Y
    211c:	f9 81       	ldd	r31, Y+1	; 0x01
    211e:	01 90       	ld	r0, Z+
    2120:	f0 81       	ld	r31, Z
    2122:	e0 2d       	mov	r30, r0
    2124:	64 2f       	mov	r22, r20
    2126:	09 95       	icall
    2128:	1f c0       	rjmp	.+62     	; 0x2168 <_ZN5Print5printEli+0x6a>
    212a:	2a 30       	cpi	r18, 0x0A	; 10
    212c:	31 05       	cpc	r19, r1
    212e:	d1 f4       	brne	.+52     	; 0x2164 <_ZN5Print5printEli+0x66>
    2130:	77 ff       	sbrs	r23, 7
    2132:	17 c0       	rjmp	.+46     	; 0x2162 <_ZN5Print5printEli+0x64>
    2134:	e8 81       	ld	r30, Y
    2136:	f9 81       	ldd	r31, Y+1	; 0x01
    2138:	01 90       	ld	r0, Z+
    213a:	f0 81       	ld	r31, Z
    213c:	e0 2d       	mov	r30, r0
    213e:	6d e2       	ldi	r22, 0x2D	; 45
    2140:	09 95       	icall
    2142:	8c 01       	movw	r16, r24
    2144:	44 27       	eor	r20, r20
    2146:	55 27       	eor	r21, r21
    2148:	ba 01       	movw	r22, r20
    214a:	4c 19       	sub	r20, r12
    214c:	5d 09       	sbc	r21, r13
    214e:	6e 09       	sbc	r22, r14
    2150:	7f 09       	sbc	r23, r15
    2152:	ce 01       	movw	r24, r28
    2154:	2a e0       	ldi	r18, 0x0A	; 10
    2156:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN5Print11printNumberEmh>
    215a:	98 01       	movw	r18, r16
    215c:	28 0f       	add	r18, r24
    215e:	39 1f       	adc	r19, r25
    2160:	04 c0       	rjmp	.+8      	; 0x216a <_ZN5Print5printEli+0x6c>
    2162:	2a e0       	ldi	r18, 0x0A	; 10
    2164:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN5Print11printNumberEmh>
    2168:	9c 01       	movw	r18, r24
    216a:	c9 01       	movw	r24, r18
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	ff 90       	pop	r15
    2176:	ef 90       	pop	r14
    2178:	df 90       	pop	r13
    217a:	cf 90       	pop	r12
    217c:	08 95       	ret

0000217e <_ZN5Print5printEii>:
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	7b 01       	movw	r14, r22
    2188:	9a 01       	movw	r18, r20
    218a:	00 27       	eor	r16, r16
    218c:	f7 fc       	sbrc	r15, 7
    218e:	00 95       	com	r16
    2190:	10 2f       	mov	r17, r16
    2192:	b8 01       	movw	r22, r16
    2194:	a7 01       	movw	r20, r14
    2196:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_ZN5Print5printEli>
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	ff 90       	pop	r15
    21a0:	ef 90       	pop	r14
    21a2:	08 95       	ret

000021a4 <_ZN5Print5printEPKc>:
    21a4:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN5Print5writeEPKc>
    21a8:	08 95       	ret

000021aa <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    21aa:	ef 92       	push	r14
    21ac:	ff 92       	push	r15
    21ae:	0f 93       	push	r16
    21b0:	1f 93       	push	r17
    21b2:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    21b4:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN5Print5writeEPKc>
    21b8:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    21ba:	c7 01       	movw	r24, r14
    21bc:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN5Print7printlnEv>
    21c0:	08 0f       	add	r16, r24
    21c2:	19 1f       	adc	r17, r25
  return n;
}
    21c4:	c8 01       	movw	r24, r16
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	08 95       	ret

000021d0 <__mulsi3>:
    21d0:	db 01       	movw	r26, r22
    21d2:	8f 93       	push	r24
    21d4:	9f 93       	push	r25
    21d6:	0e 94 2c 11 	call	0x2258	; 0x2258 <__muluhisi3>
    21da:	bf 91       	pop	r27
    21dc:	af 91       	pop	r26
    21de:	a2 9f       	mul	r26, r18
    21e0:	80 0d       	add	r24, r0
    21e2:	91 1d       	adc	r25, r1
    21e4:	a3 9f       	mul	r26, r19
    21e6:	90 0d       	add	r25, r0
    21e8:	b2 9f       	mul	r27, r18
    21ea:	90 0d       	add	r25, r0
    21ec:	11 24       	eor	r1, r1
    21ee:	08 95       	ret

000021f0 <__udivmodsi4>:
    21f0:	a1 e2       	ldi	r26, 0x21	; 33
    21f2:	1a 2e       	mov	r1, r26
    21f4:	aa 1b       	sub	r26, r26
    21f6:	bb 1b       	sub	r27, r27
    21f8:	fd 01       	movw	r30, r26
    21fa:	0d c0       	rjmp	.+26     	; 0x2216 <__udivmodsi4_ep>

000021fc <__udivmodsi4_loop>:
    21fc:	aa 1f       	adc	r26, r26
    21fe:	bb 1f       	adc	r27, r27
    2200:	ee 1f       	adc	r30, r30
    2202:	ff 1f       	adc	r31, r31
    2204:	a2 17       	cp	r26, r18
    2206:	b3 07       	cpc	r27, r19
    2208:	e4 07       	cpc	r30, r20
    220a:	f5 07       	cpc	r31, r21
    220c:	20 f0       	brcs	.+8      	; 0x2216 <__udivmodsi4_ep>
    220e:	a2 1b       	sub	r26, r18
    2210:	b3 0b       	sbc	r27, r19
    2212:	e4 0b       	sbc	r30, r20
    2214:	f5 0b       	sbc	r31, r21

00002216 <__udivmodsi4_ep>:
    2216:	66 1f       	adc	r22, r22
    2218:	77 1f       	adc	r23, r23
    221a:	88 1f       	adc	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	1a 94       	dec	r1
    2220:	69 f7       	brne	.-38     	; 0x21fc <__udivmodsi4_loop>
    2222:	60 95       	com	r22
    2224:	70 95       	com	r23
    2226:	80 95       	com	r24
    2228:	90 95       	com	r25
    222a:	9b 01       	movw	r18, r22
    222c:	ac 01       	movw	r20, r24
    222e:	bd 01       	movw	r22, r26
    2230:	cf 01       	movw	r24, r30
    2232:	08 95       	ret

00002234 <__tablejump2__>:
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31

00002238 <__tablejump__>:
    2238:	05 90       	lpm	r0, Z+
    223a:	f4 91       	lpm	r31, Z
    223c:	e0 2d       	mov	r30, r0
    223e:	09 94       	ijmp

00002240 <__umulhisi3>:
    2240:	a2 9f       	mul	r26, r18
    2242:	b0 01       	movw	r22, r0
    2244:	b3 9f       	mul	r27, r19
    2246:	c0 01       	movw	r24, r0
    2248:	a3 9f       	mul	r26, r19
    224a:	01 d0       	rcall	.+2      	; 0x224e <__umulhisi3+0xe>
    224c:	b2 9f       	mul	r27, r18
    224e:	70 0d       	add	r23, r0
    2250:	81 1d       	adc	r24, r1
    2252:	11 24       	eor	r1, r1
    2254:	91 1d       	adc	r25, r1
    2256:	08 95       	ret

00002258 <__muluhisi3>:
    2258:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    225c:	a5 9f       	mul	r26, r21
    225e:	90 0d       	add	r25, r0
    2260:	b4 9f       	mul	r27, r20
    2262:	90 0d       	add	r25, r0
    2264:	a4 9f       	mul	r26, r20
    2266:	80 0d       	add	r24, r0
    2268:	91 1d       	adc	r25, r1
    226a:	11 24       	eor	r1, r1
    226c:	08 95       	ret

0000226e <memcpy_P>:
    226e:	fb 01       	movw	r30, r22
    2270:	dc 01       	movw	r26, r24
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <memcpy_P+0xa>
    2274:	05 90       	lpm	r0, Z+
    2276:	0d 92       	st	X+, r0
    2278:	41 50       	subi	r20, 0x01	; 1
    227a:	50 40       	sbci	r21, 0x00	; 0
    227c:	d8 f7       	brcc	.-10     	; 0x2274 <memcpy_P+0x6>
    227e:	08 95       	ret

00002280 <memcpy>:
    2280:	fb 01       	movw	r30, r22
    2282:	dc 01       	movw	r26, r24
    2284:	02 c0       	rjmp	.+4      	; 0x228a <memcpy+0xa>
    2286:	01 90       	ld	r0, Z+
    2288:	0d 92       	st	X+, r0
    228a:	41 50       	subi	r20, 0x01	; 1
    228c:	50 40       	sbci	r21, 0x00	; 0
    228e:	d8 f7       	brcc	.-10     	; 0x2286 <memcpy+0x6>
    2290:	08 95       	ret

00002292 <_exit>:
    2292:	f8 94       	cli

00002294 <__stop_program>:
    2294:	ff cf       	rjmp	.-2      	; 0x2294 <__stop_program>
